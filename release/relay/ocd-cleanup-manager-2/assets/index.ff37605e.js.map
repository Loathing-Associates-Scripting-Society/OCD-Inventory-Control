{"version":3,"file":"index.ff37605e.js","sources":["../../../../packages/common/build/src/api/cleanup-table.js","../../../../packages/common/build/src/data/ocd-rule.js","../../../../packages/manager/src/api.ts","../../../../packages/common/build/src/api/base.js","../../../../packages/manager/src/toaster.tsx","../../../../packages/manager/src/util.ts","../../../../packages/manager/src/components/SelectOcdAction.tsx","../../../../packages/manager/src/components/OcdRulePicker.tsx","../../../../packages/manager/src/components/OcdItemTable.tsx","../../../../packages/manager/src/components/PanelCategorizedItems.tsx","../../../../packages/common/build/src/api/ruleset.js","../../../../packages/manager/src/components/InputGroupAffixedFileName.tsx","../../../../packages/manager/src/components/PanelConfig.tsx","../../../../packages/common/build/src/api/config.js","../../../../packages/manager/src/components/PanelInformation.tsx","../../../../packages/common/build/src/api/statistics.js","../../../../packages/manager/src/components/PanelUncategorizedItems.tsx","../../../../packages/manager/src/App.tsx","../../../../packages/manager/src/index.tsx"],"sourcesContent":["/**\r\n * @file Defines routes for Cleanup Tables.\r\n */\r\nexport var CLEANUP_TABLES_CATEGORIZED_ROUTE = '/cleanup-tables/categorized';\r\nexport var CLEANUP_TABLES_UNCATEGORIZED_ROUTE = '/cleanup-tables/uncategorized';\r\n//# sourceMappingURL=cleanup-table.js.map","/**\r\n * Object whose keys define what string constants make up the `OcdAction` type.\r\n * Also used to check at runtime if a string belongs to the `OcdAction` type.\r\n * The values are unused; they can be anything.\r\n */\r\nvar _ocdActions = Object.freeze({\r\n    AUTO: 0,\r\n    BREAK: 0,\r\n    CLAN: 0,\r\n    CLST: 0,\r\n    DISC: 0,\r\n    DISP: 0,\r\n    GIFT: 0,\r\n    KEEP: 0,\r\n    MAKE: 0,\r\n    MALL: 0,\r\n    PULV: 0,\r\n    TODO: 0,\r\n    UNTN: 0,\r\n    USE: 0,\r\n});\r\n/**\r\n * Checks if the given value is a valid `OcdAction` type.\r\n */\r\nexport var isOcdAction = function (value) {\r\n    return typeof value === 'string' &&\r\n        Object.prototype.hasOwnProperty.call(_ocdActions, value);\r\n};\r\n//# sourceMappingURL=ocd-rule.js.map","/**\n * @file Methods for communicating with the relay script\n */\n\nimport {\n  CLEANUP_TABLES_CATEGORIZED_ROUTE,\n  CLEANUP_TABLES_UNCATEGORIZED_ROUTE,\n  CONFIG_ROUTE,\n  ErrorResponseBase,\n  INVENTORY_ROUTE,\n  OcdCleanupConfig,\n  prepareRequestForSerialization,\n  ReadonlyOcdRuleset,\n  ReadonlyOcdRulesetPatch,\n  RELAY_SCRIPT_FILE,\n  Request,\n  RequestMethodFor,\n  Response,\n  Routes,\n  RULESET_ROUTE,\n  STATISTICS_ROUTE,\n} from '@ocd-cleanup/common';\n\n/**\n * API error class. Thrown when the API returns an error response.\n */\nexport class ApiError extends Error {\n  /** Error code. This does _not_ map 1:1 to HTTP error codes. */\n  readonly code: number;\n  /** Error response object returned by the API. */\n  readonly response: unknown;\n\n  constructor(message: string, code: number, response: unknown) {\n    super(message);\n    this.code = code;\n    this.response = response;\n  }\n}\nApiError.prototype.name = 'ApiError';\n\n/**\n * Fetches data using routes and methods defined in `@ocd-cleanup/common`.\n * @param path Request route\n * @param method Request method\n * @return Asynchronous fetcher callback\n * @throws {ApiError}\n */\nconst fetchFromApi = async <\n  Path extends keyof Routes,\n  Method extends RequestMethodFor<Path>\n>(\n  path: Path,\n  method: Method,\n  body: Readonly<Omit<Request<Path, Method>, 'path' | 'method'>>\n) => {\n  const preparedRequest = prepareRequestForSerialization({\n    path,\n    method,\n    ...body,\n  });\n\n  // KoLmafia requires the `relay=true` parameter in order to execute JavaScript\n  // -based relay scripts.\n  const fetchResponse = await fetch(`/${RELAY_SCRIPT_FILE}?relay=true`, {\n    body: new URLSearchParams(preparedRequest),\n    method: 'POST',\n  });\n  if (!fetchResponse.ok) {\n    let text;\n    try {\n      text = await fetchResponse.text();\n    } catch (e) {\n      // Crude approach, but text() only fails under rare circumstances...\n      console.error(e);\n    }\n    throw new ApiError(fetchResponse.statusText, fetchResponse.status, text);\n  }\n\n  let response;\n  try {\n    response = (await fetchResponse.json()) as\n      | Response<Path, Method>\n      | ErrorResponseBase;\n  } catch (error) {\n    throw new ApiError(\n      `Invalid JSON returned from server (${error})\\nResponse: ${response}`,\n      500,\n      response\n    );\n  }\n\n  if ('error' in response) {\n    throw new ApiError(\n      response.error.message,\n      response.error.code,\n      response.error.message\n    );\n  }\n  return response;\n};\n\nexport const fetchGetCleanupTableCategorized = () =>\n  fetchFromApi(CLEANUP_TABLES_CATEGORIZED_ROUTE, 'get', {});\n\nexport const fetchGetCleanupTableUncategorized = () =>\n  fetchFromApi(CLEANUP_TABLES_UNCATEGORIZED_ROUTE, 'get', {});\n\nexport const fetchSaveOcdRuleset = (ocdRules: ReadonlyOcdRuleset) =>\n  fetchFromApi(RULESET_ROUTE, 'post', {ocdRules});\n\nexport const fetchPatchOcdRuleset = (ocdRulesPatch: ReadonlyOcdRulesetPatch) =>\n  fetchFromApi(RULESET_ROUTE, 'patch', {ocdRulesPatch});\n\nexport const fetchInventoryState = () =>\n  fetchFromApi(INVENTORY_ROUTE, 'get', {});\n\nexport const fetchGetOcdCleanupConfig = () =>\n  fetchFromApi(CONFIG_ROUTE, 'get', {});\n\nexport const fetchSaveOcdCleanupConfig = (\n  config: Readonly<OcdCleanupConfig>,\n  shouldCopyDataFiles?: boolean\n) => fetchFromApi(CONFIG_ROUTE, 'post', {config, shouldCopyDataFiles});\n\nexport const fetchGetStatistics = () =>\n  fetchFromApi(STATISTICS_ROUTE, 'get', {});\n","/**\r\n * @file Defines base types for API requests and responses.\r\n */\r\nfunction isValidRequestMethod(value) {\r\n    return value === 'get' || value === 'patch' || value === 'post';\r\n}\r\nfunction isRequestBasePropertyName(value) {\r\n    return value === 'method' || value === 'path';\r\n}\r\n/**\r\n * Converts a `RequestBase` object to a flat object suitable for serialization.\r\n *\r\n * A client should serialize the returned value using `URLSearchParams()` before\r\n * sending it over the network.\r\n */\r\nexport function prepareRequestForSerialization(request) {\r\n    var serializedRequest = {};\r\n    for (var _i = 0, _a = Object.keys(request); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        // Known keys should not be serialized, but passed as-is.\r\n        if (isRequestBasePropertyName(key)) {\r\n            serializedRequest[key] = request[key];\r\n        }\r\n        else {\r\n            // All other keys should be serialized, even if their values are strings.\r\n            // JSON.stringify() can return undefined if the input is undefined.\r\n            // TypeScript currently doesn't check this, so we must do so manually.\r\n            var serializedValue = JSON.stringify(request[key]);\r\n            // Skip undefined fields\r\n            if (serializedValue !== undefined) {\r\n                serializedRequest[key] = serializedValue;\r\n            }\r\n        }\r\n    }\r\n    return serializedRequest;\r\n}\r\n/**\r\n * Converts a flat object to a `RequestBase`.\r\n *\r\n * A server should call this on the return value of `formFields()`\r\n * (analogous to `request.body` in Express.js).\r\n * @param wrappedRequest Wrapped request object\r\n * @throws {Error} If any `RequestBase` properties are missing or invalid\r\n */\r\nexport function unwrapDeserializedRequest(wrappedRequest) {\r\n    // Cast to Partial<> so that TypeScript type-checks our property access\r\n    var uncheckedRequest = wrappedRequest;\r\n    if (typeof uncheckedRequest.method !== 'string') {\r\n        throw new Error('Missing URL/form parameter: method');\r\n    }\r\n    else if (!isValidRequestMethod(uncheckedRequest.method)) {\r\n        throw new Error(\"Invalid URL/form parameter: method=\" + uncheckedRequest.method);\r\n    }\r\n    if (typeof uncheckedRequest.path !== 'string') {\r\n        throw new Error('Missing URL/form parameter: path');\r\n    }\r\n    var request = {};\r\n    for (var _i = 0, _a = Object.keys(wrappedRequest); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        // Known keys are passed as-is.\r\n        // All other keys are deserialized.\r\n        request[key] = isRequestBasePropertyName(key)\r\n            ? wrappedRequest[key]\r\n            : JSON.parse(wrappedRequest[key]);\r\n    }\r\n    return request;\r\n}\r\n//# sourceMappingURL=base.js.map","/**\n * @file Provides methods for toast-based notifications.\n */\n\nimport {Toaster} from '@blueprintjs/core';\nimport React from 'react';\nimport {ApiError} from './api';\n\n/** Globally shared `<Toaster>` instance for displaying notifications. */\nexport const toaster = Toaster.create({maxToasts: 1});\n\n/**\n * Render `error` as a toast message.\n * @param error Error object. If this is a falsy value, the toast message will\n *    be removed.\n * @param errorMessage Message to show\n * @param key Used to uniquely identify the toast message\n */\nexport const setErrorToast = (\n  key: string,\n  error: unknown,\n  errorMessage: string\n) => {\n  if (error) {\n    toaster.show(\n      {\n        icon: 'warning-sign',\n        intent: 'warning',\n        message:\n          error instanceof ApiError ? (\n            <>\n              {errorMessage}: {error.message}\n              <br />\n              Response: {String(error.response)}\n            </>\n          ) : (\n            `${errorMessage}: ${error}`\n          ),\n      },\n      key\n    );\n  } else {\n    toaster.dismiss(key);\n  }\n};\n\n/**\n * Display an informational toast message.\n * @param message Message to show\n */\nexport const showInfoToast = (message: string) => {\n  toaster.show({icon: 'info-sign', message});\n};\n\n/**\n * Display a toast message to indicate that the app is saving something.\n * @param key Used to uniquely identify the toast message\n * @param isSaving Whether to show or hide the toast\n * @param message Message to show\n */\nexport const setSavingToast = (\n  key: string,\n  isSaving: boolean,\n  message: string\n) => {\n  if (isSaving) {\n    toaster.show({icon: 'floppy-disk', intent: 'primary', message}, key);\n  } else {\n    toaster.dismiss(key);\n  }\n};\n","/**\n * @file Utilities that don't quite fit anywhere else.\n */\n\nimport {OcdAction, OcdItem} from '@ocd-cleanup/common';\n\n/**\n * Maximum possible mallsell price for any item.\n * This is a limit enforced by KoL.\n */\nexport const MAX_MALL_PRICE = 999_999_999 as const;\n\n/**\n * Zero-width space character. This can be used to allow browsers to break long\n * words across multiple lines, or as an empty placeholder.\n */\nexport const ZWSP = '\\u200B';\n\n/**\n * @param action OCD leanup action\n * @return Human-readable short name for the action\n */\nexport const ocdActionToString = (action: OcdAction): string => {\n  switch (action) {\n    case 'AUTO':\n      return 'Autosell';\n    case 'BREAK':\n      return 'Break apart';\n    case 'CLAN':\n      return 'Put in clan stash';\n    case 'CLST':\n      return 'Closet';\n    case 'DISC':\n      return 'Discard';\n    case 'DISP':\n      return 'Display';\n    case 'GIFT':\n      return 'Send as gift';\n    case 'KEEP':\n      return 'Keep all';\n    case 'MAKE':\n      return 'Craft';\n    case 'MALL':\n      return 'Mall sale';\n    case 'PULV':\n      return 'Pulverize';\n    case 'TODO':\n      return 'Reminder';\n    case 'UNTN':\n      return 'Untinker';\n    case 'USE':\n      return 'Use';\n    default:\n      // If we forget an action, TypeScript will catch this as a compile error\n      return ((n: never) => n)(action);\n  }\n};\n\n/**\n * @param item Item type to check\n * @return Whether OCD-Cleanup Manager should warn about pulverizing the item\n */\nexport const shouldWarnOnPulverize = (item: Readonly<OcdItem>): boolean =>\n  !item.isTradable;\n\n/**\n * Identity function that returns the first argument as-is.\n * This is primarily intended to perform compile-time type-checks against union\n * types or enums.\n * **This does NOT perform any runtime type checks!**\n * @param value\n * @return `value` unmodified\n */\nexport const typeCheck = <T>(value: T) => value;\n","import {Colors, HTMLSelect} from '@blueprintjs/core';\nimport {isOcdAction, OcdAction, OcdItem} from '@ocd-cleanup/common';\nimport classNames from 'classnames';\nimport React from 'react';\nimport {shouldWarnOnPulverize, typeCheck} from '../util';\nimport './SelectOcdAction.css';\n\n/**\n * A fallback value used to denote uncategorized items in the `<select>`.\n */\nexport const UNKNOWN_OCD_ACTION = 'UNKN';\nexport type OcdActionOrUnknown = OcdAction | typeof UNKNOWN_OCD_ACTION;\n\nconst isOcdActionOrUnknown = (value: unknown): value is OcdActionOrUnknown =>\n  value === UNKNOWN_OCD_ACTION || isOcdAction(value);\n\ninterface SelectOcdActionPropsBase {\n  item: Readonly<OcdItem>;\n  onChange: (value: OcdActionOrUnknown) => void;\n  value: OcdActionOrUnknown;\n}\n\ninterface SelectOcdActionProps\n  extends SelectOcdActionPropsBase,\n    Omit<\n      React.ComponentProps<typeof HTMLSelect>,\n      keyof SelectOcdActionPropsBase\n    > {}\n\n/**\n * `<HTMLSelect>` element for picking an OCD-Cleanup action.\n */\nexport const SelectOcdAction = React.memo(function SelectOcdAction({\n  className,\n  item,\n  onChange,\n  value,\n  ...restProps\n}: SelectOcdActionProps) {\n  return (\n    <HTMLSelect\n      className={classNames(`OcdRulePicker__SelectAction`, className)}\n      onChange={e =>\n        isOcdActionOrUnknown(e.target.value) && onChange(e.target.value)\n      }\n      value={value}\n      {...restProps}\n    >\n      <option value={typeCheck<OcdActionOrUnknown>(UNKNOWN_OCD_ACTION)}>\n        (uncategorized)\n      </option>\n      <option value={typeCheck<OcdActionOrUnknown>('KEEP')}>Keep all</option>\n      {item.canMall && (\n        <option value={typeCheck<OcdActionOrUnknown>('MALL')}>Mall sale</option>\n      )}\n      {item.canBreak && (\n        <option value={typeCheck<OcdActionOrUnknown>('BREAK')}>\n          Break apart\n        </option>\n      )}\n      {item.canAutosell && (\n        <option value={typeCheck<OcdActionOrUnknown>('AUTO')}>Autosell</option>\n      )}\n      {item.canDiscard && (\n        <option\n          style={{color: Colors.ORANGE2}}\n          value={typeCheck<OcdActionOrUnknown>('DISC')}\n        >\n          Discard\n        </option>\n      )}\n      {item.canGift && (\n        <option value={typeCheck<OcdActionOrUnknown>('GIFT')}>\n          Send as gift\n        </option>\n      )}\n      {item.canStash && (\n        <option value={typeCheck<OcdActionOrUnknown>('CLAN')}>\n          Put in clan stash\n        </option>\n      )}\n      {item.canPulverize && (\n        <option\n          style={\n            shouldWarnOnPulverize(item) ? {color: Colors.ORANGE2} : undefined\n          }\n          value={typeCheck<OcdActionOrUnknown>('PULV')}\n        >\n          Pulverize\n        </option>\n      )}\n      {item.canMake && (\n        <option value={typeCheck<OcdActionOrUnknown>('MAKE')}>Craft...</option>\n      )}\n      {item.canUntinker && (\n        <option value={typeCheck<OcdActionOrUnknown>('UNTN')}>Untinker</option>\n      )}\n      {item.canUse && (\n        <option value={typeCheck<OcdActionOrUnknown>('USE')}>Use</option>\n      )}\n      {item.canCloset && (\n        <option value={typeCheck<OcdActionOrUnknown>('CLST')}>Closet</option>\n      )}\n      {item.canDisplay && (\n        <option value={typeCheck<OcdActionOrUnknown>('DISP')}>Display</option>\n      )}\n      <option value={typeCheck<OcdActionOrUnknown>('TODO')}>Reminder</option>\n    </HTMLSelect>\n  );\n});\n","import {\n  Checkbox,\n  FormGroup,\n  InputGroup,\n  Intent,\n  NumericInput,\n} from '@blueprintjs/core';\nimport {OcdItem, OcdRule} from '@ocd-cleanup/common';\nimport React, {useCallback} from 'react';\nimport {MAX_MALL_PRICE, shouldWarnOnPulverize} from '../util';\nimport './OcdRulePicker.css';\nimport {\n  OcdActionOrUnknown,\n  SelectOcdAction,\n  UNKNOWN_OCD_ACTION,\n} from './SelectOcdAction';\n\n// Note: We use one condition per each conditional option, which allows the\n// backend to decide what can be done with each item.\nexport const OcdRulePicker = ({\n  item,\n  rule,\n  onChange,\n}: {\n  item: Readonly<OcdItem>;\n  /**\n   * Callback that accepts a new rule, or `null` if the user changed the rule\n   * to \"(uncategorized)\".\n   * The argument is the new rule, or an updater function that takes the\n   * previous OCD rule as argument and returns a new OCD rule.\n   */\n  onChange?: (newRuleOrReducer: React.SetStateAction<OcdRule | null>) => void;\n  rule: Readonly<OcdRule> | null;\n}) => {\n  const handleActionChange = useCallback(\n    (action: OcdActionOrUnknown) => {\n      if (!onChange) return;\n      onChange(oldRule => {\n        if (action === oldRule?.action) return oldRule;\n\n        // If the action type changes to another action that requires additional\n        // parameters, initialize these parameters.\n        // Note: This means that additional parameters are NOT remembered when\n        // the user switches an action. This may be undesirable...perhaps use\n        // some internal state to maintain this, or let the parent component\n        // handle it?\n        if (action === UNKNOWN_OCD_ACTION) {\n          return null;\n        } else if (action === 'GIFT') {\n          return {...oldRule, action, message: '', recipent: ''};\n        } else if (action === 'MAKE') {\n          return {\n            ...oldRule,\n            action,\n            shouldUseCreatableOnly: false,\n            targetItem: '',\n          };\n        } else if (action === 'MALL') {\n          return {...oldRule, action, minPrice: 0};\n        } else if (action === 'TODO') {\n          return {...oldRule, action, message: ''};\n        } else {\n          return {...oldRule, action};\n        }\n      });\n    },\n    [onChange]\n  );\n\n  let helperText;\n  let intent;\n\n  if (rule) {\n    if (rule.action === 'PULV' && shouldWarnOnPulverize(item)) {\n      helperText = 'You will pulverize an untradable item.';\n      intent = Intent.WARNING;\n    } else if (rule.action === 'DISC') {\n      helperText = 'You will gain no meat from discarding.';\n      intent = Intent.WARNING;\n    }\n  }\n\n  return (\n    <FormGroup\n      className=\"OcdRulePicker\"\n      helperText={helperText}\n      intent={intent}\n    >\n      {/* Wrap child elements inside a <div>. This separates them from the\n          helper text <div>, which is injected by the outer <FormGroup>.\n          This separation allows the children to be arranged on a single \"row\"\n          with the helper text under them. */}\n      <div className=\"OcdRulePicker__Inputs\">\n        <SelectOcdAction\n          className=\"OcdRulePicker__Child\"\n          item={item}\n          onChange={handleActionChange}\n          value={rule ? rule.action : UNKNOWN_OCD_ACTION}\n        />\n\n        {!rule ? null : rule.action === 'GIFT' ? (\n          <>\n            <FormGroup\n              className=\"OcdRulePicker__Child\"\n              contentClassName=\"OcdRulePicker__InputGiftRecipent\"\n              helperText={!rule.recipent && 'No recipent name'}\n              inline\n              intent={rule.recipent ? undefined : Intent.DANGER}\n              label=\"to\"\n            >\n              <InputGroup\n                className=\"OcdRulePicker__InputText\"\n                intent={rule.recipent ? undefined : Intent.DANGER}\n                onChange={e => onChange?.({...rule, recipent: e.target.value})}\n                placeholder=\"Player name\"\n                small\n                value={rule.recipent}\n              />\n            </FormGroup>\n            <FormGroup\n              className=\"OcdRulePicker__Child\"\n              contentClassName=\"OcdRulePicker__InputGiftMessage\"\n              inline\n              label=\"with\"\n            >\n              <InputGroup\n                className=\"OcdRulePicker__InputText\"\n                onChange={e => onChange?.({...rule, message: e.target.value})}\n                placeholder=\"Kmail message\"\n                small\n                value={rule.message}\n              />\n            </FormGroup>\n          </>\n        ) : rule.action === 'MAKE' ? (\n          <>\n            <FormGroup\n              className=\"OcdRulePicker__Child\"\n              contentClassName=\"OcdRulePicker__InputMakeTarget\"\n              helperText={!rule.targetItem && 'No item name'}\n              inline\n              intent={!rule.targetItem ? Intent.DANGER : undefined}\n              label=\"into\"\n            >\n              <InputGroup\n                className=\"OcdRulePicker__InputText\"\n                intent={!rule.targetItem ? Intent.DANGER : undefined}\n                onChange={e =>\n                  onChange?.({...rule, targetItem: e.target.value})\n                }\n                placeholder=\"Item name\"\n                small\n                value={rule.targetItem}\n              />\n            </FormGroup>\n            <Checkbox\n              checked={rule.shouldUseCreatableOnly}\n              className=\"OcdRulePicker__Child OcdRulePicker__Checkbox\"\n              onChange={e =>\n                onChange?.({\n                  ...rule,\n                  shouldUseCreatableOnly: e.currentTarget.checked,\n                })\n              }\n            >\n              <span className=\"OcdRulePicker__CheckBoxText\">\n                Only use available ingredients\n              </span>\n            </Checkbox>\n          </>\n        ) : rule.action === 'MALL' ? (\n          <FormGroup\n            className=\"OcdRulePicker__Child\"\n            contentClassName=\"OcdRulePicker__InputMallMinPrice\"\n            inline\n            label=\"min price\"\n          >\n            <NumericInput\n              majorStepSize={100}\n              max={MAX_MALL_PRICE}\n              min={0}\n              minorStepSize={null}\n              onValueChange={value => {\n                if (Number.isInteger(value)) {\n                  onChange?.({\n                    ...rule,\n                    minPrice: Math.max(0, Math.min(MAX_MALL_PRICE, value)),\n                  });\n                }\n              }}\n              stepSize={1}\n              value={rule.minPrice}\n            />\n          </FormGroup>\n        ) : rule.action === 'TODO' ? (\n          <FormGroup\n            className=\"OcdRulePicker__Child\"\n            contentClassName=\"OcdRulePicker__InputTodoMessage\"\n            inline\n            label=\"with message:\"\n          >\n            <InputGroup\n              className=\"OcdRulePicker__InputText\"\n              onChange={e => onChange?.({...rule, message: e.target.value})}\n              placeholder=\"Enter reminder message\"\n              small\n              value={rule.message}\n            />\n          </FormGroup>\n        ) : null}\n      </div>\n    </FormGroup>\n  );\n};\n","import {\n  AnchorButton,\n  Button,\n  ButtonGroup,\n  NumericInput,\n  Tag,\n  UL,\n} from '@blueprintjs/core';\nimport {Classes as Popover2Classes, Popover2} from '@blueprintjs/popover2';\nimport {\n  OcdItem,\n  OcdRule,\n  OcdRuleset,\n  ReadonlyInventoryState,\n  ReadonlyOcdRuleset,\n} from '@ocd-cleanup/common';\nimport classNames from 'classnames';\nimport React, {useCallback, useEffect, useMemo, useRef} from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {areEqual, FixedSizeList} from 'react-window';\nimport './OcdItemTable.css';\nimport {OcdRulePicker} from './OcdRulePicker';\n\n/**\n * Adds a zero-width space (ZWSP) after each comma (`,`) in the given string.\n * This allows the `overflow-wrap: break-word` CSS rule to break long numbers\n * across multiple lines.\n */\nconst addZwspAfterComma = (str: string) => str.replace(/,/g, ',\\u200B');\n\n/**\n * Launches the in-game item description page in a popup window.\n * @param descid Item descid\n */\nconst itemDescriptionPopup = (descid: string) => {\n  window\n    .open(`/desc_item.php?whichitem=${descid}`, 'name', 'height=200,width=214')\n    ?.focus();\n};\n\nexport type RuleChangeHandler = (\n  itemId: number,\n  newRuleOrReducer: React.SetStateAction<OcdRule | null>\n) => void;\n\ninterface OcdItemTableRowProps extends React.ComponentProps<'div'> {\n  inventory: ReadonlyInventoryState;\n  item: Readonly<OcdItem>;\n  onRuleChange: RuleChangeHandler;\n  rule: Readonly<OcdRule | null>;\n}\n\n/**\n * Row component for `<OcdItemTable/>`.\n */\nconst OcdItemTableRow = React.memo(function OcdItemTableRow({\n  className,\n  inventory,\n  item,\n  onRuleChange,\n  rule,\n  ...restProps\n}: OcdItemTableRowProps) {\n  return (\n    <div className={`OcdItemTable__Row ${className || ''}`} {...restProps}>\n      <div className=\"OcdItemTable__Cell OcdItemTable__ColumnItemName\">\n        <AnchorButton\n          className=\"OcdItemTable__ItemImageLink\"\n          minimal\n          onClick={useCallback(() => itemDescriptionPopup(item.descid), [\n            item.descid,\n          ])}\n          title=\"View item description\"\n        >\n          {useMemo(\n            () => (\n              <img\n                className=\"OcdItemTable__ItemImage\"\n                alt={item.name}\n                src={`/images/itemimages/${item.image}`}\n              />\n            ),\n            [item]\n          )}\n        </AnchorButton>\n        <AnchorButton\n          className=\"OcdItemTable__ItemNameLink\"\n          href={`https://kol.coldfront.net/thekolwiki/index.php/Special:Search?search=${item.name}&go=Go`}\n          minimal\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          title=\"Visit KoL wiki page\"\n        >\n          {useMemo(\n            () => (\n              <>\n                <span dangerouslySetInnerHTML={{__html: item.name}}></span>\n                {inventory.inventory[item.id] > 0 && (\n                  <>\n                    {' '}\n                    <i>({inventory.inventory[item.id]})</i>\n                  </>\n                )}\n              </>\n            ),\n            [inventory, item]\n          )}\n        </AnchorButton>\n      </div>\n      <div className=\"OcdItemTable__Cell OcdItemTable__ColumnClosetAmount\">\n        {inventory.closet[item.id] || 0}\n      </div>\n      <div className=\"OcdItemTable__Cell OcdItemTable__ColumnStorageAmount\">\n        {inventory.storage[item.id] || 0}\n      </div>\n      <div className=\"OcdItemTable__Cell OcdItemTable__ColumnDisplayCaseAmount\">\n        {inventory.displayCase[item.id] || 0}\n      </div>\n      <div className=\"OcdItemTable__Cell OcdItemTable__ColumnMallPrice\">\n        {item.mallPrice && addZwspAfterComma(item.mallPrice.toLocaleString())}\n        {item.mallPrice != null && item.isMallPriceAtMinimum && (\n          <Tag\n            className=\"OcdItemTable__ColumnMallPrice--minimum\"\n            htmlTitle=\"Is at minimum mall price\"\n            intent=\"primary\"\n            minimal\n          >\n            min\n          </Tag>\n        )}\n      </div>\n      <div className=\"OcdItemTable__Cell OcdItemTable__ColumnKeepAmount\">\n        <NumericInput\n          className=\"OcdItemTable__InputKeepAmount\"\n          disabled={!rule || rule.action === 'KEEP'}\n          fill\n          majorStepSize={10}\n          min={0}\n          minorStepSize={null}\n          onValueChange={useCallback(\n            (value: number) => {\n              if (Number.isInteger(value)) {\n                onRuleChange(\n                  item.id,\n                  rule => rule && {...rule, keepAmount: value}\n                );\n              }\n            },\n            [item.id, onRuleChange]\n          )}\n          stepSize={1}\n          value={rule?.keepAmount || 0}\n        />\n      </div>\n      <div className=\"OcdItemTable__Cell OcdItemTable__ColumnAction\">\n        <OcdRulePicker\n          item={item}\n          onChange={useCallback(\n            newRuleOrReducer => onRuleChange(item.id, newRuleOrReducer),\n            [item.id, onRuleChange]\n          )}\n          rule={rule}\n        />\n      </div>\n    </div>\n  );\n},\nareEqual);\n\ninterface OcdItemTableRowData {\n  inventory: ReadonlyInventoryState;\n  items: readonly Readonly<OcdItem>[];\n  ocdRules: ReadonlyOcdRuleset;\n  onRuleChange: RuleChangeHandler;\n}\n\ninterface OcdItemTablePropsBase {\n  /**\n   * Whether the Reset button is disabled.\n   */\n  disableReset?: boolean;\n  /**\n   * Whether the Save button is disabled.\n   */\n  disableSave?: boolean;\n  /** Inventory state. Used to show item quantities for each row. */\n  inventory: ReadonlyInventoryState;\n  /** Items to display in the table. */\n  items: readonly Readonly<OcdItem>[];\n  /**\n   * OCD cleanup ruleset.\n   * If an item in `items` does not have a rule here, a default rule (\"UNKN\") is\n   * used.\n   */\n  ocdRules: ReadonlyOcdRuleset;\n  /**\n   * Callback that is called when an OCD rule is modified.\n   * The argument is a function that takes the previous OCD ruleset as argument\n   * and returns a new OCD ruleset (Think `setState()` with updater callbacks).\n   *\n   * This implementation is necessary to prevent the entire table from being\n   * re-rendered (causing lag) on every input change.\n   */\n  onChange?: (updater: (prevOcdRules: OcdRuleset) => OcdRuleset) => void;\n  /**\n   * Called when the user clicks the Reset button.\n   */\n  onReset?: () => void;\n  /**\n   * Called when the user edits a rule for an item.\n   * If not given, the default implementation calls `onChange` instead.\n   */\n  onRuleChange?: RuleChangeHandler;\n  /**\n   * Called when the user clicks the Save button.\n   */\n  onSave?: () => void;\n}\n\ninterface OcdItemTableProps\n  extends OcdItemTablePropsBase,\n    Omit<React.ComponentProps<'div'>, keyof OcdItemTablePropsBase> {}\n\nexport const OcdItemTable = React.memo(function OcdItemTable({\n  className,\n  disableReset,\n  disableSave,\n  inventory,\n  items,\n  ocdRules,\n  onChange,\n  onRuleChange,\n  onReset,\n  onSave,\n  ...restProps\n}: OcdItemTableProps) {\n  const defaultRuleChangeHandler = useCallback(\n    (itemId: number, newRuleOrReducer: React.SetStateAction<OcdRule | null>) =>\n      onChange?.(prevOcdRules => {\n        const newRule =\n          typeof newRuleOrReducer === 'function'\n            ? newRuleOrReducer(prevOcdRules[itemId] || null)\n            : newRuleOrReducer;\n        if (newRule) return {...prevOcdRules, [itemId]: newRule};\n        else {\n          const {[itemId]: _removed, ...restOcdRules} = prevOcdRules;\n          return restOcdRules;\n        }\n      }),\n    [onChange]\n  );\n\n  // Smooth scrolling (behavior: \"smooth\") via keyboard is tricky.\n  // When the user holds down on the arrow up/down or page up/down keys,\n  // onKeyDown() fires way too fast, overloading the browser and causing\n  // scrolling to become extremely jittery.\n  // I tried multiple ways of debouncing this:\n  //\n  // 1. Using lodash.throttle()\n  //    - Was quite janky and forced me to set unreasonably high throttle\n  //      delays, on the order of ~500ms for page up/down. Even then, it was\n  //      unreliably janky.\n  // 2. Manually debouncing using requestAnimationFrame() or setTimeout()\n  //    - This was worse than using lodash.throttle().\n  // 3. Using `isScrolling`\n  //    - Much more reliable than the above. However, it caused long pauses\n  //      between scrolls when the user holds down a scrolling key. Also, it\n  //      didn't prevent doScroll() from being called multiple times before the\n  //      component registered `isScrolling`.\n  //\n  // I eventually landed on a combination of (2) and (3) to successfully\n  // debounce scrolling. This is still quite slow, but almost jitter-free.\n\n  // Use requestAnimationFrame() and isScrolling to throttle scroll events\n  const scrollTimerRef = useRef<number>();\n  const isScrollingRef = useRef(false);\n\n  /**\n   * Debounced scrolling function\n   * @param type\n   * @param amount Position for `to`, offset for `by`\n   */\n  const doScroll = useCallback((type: 'to' | 'by', amount: number) => {\n    if (isScrollingRef.current) return;\n    if (scrollTimerRef.current !== undefined) return;\n    scrollTimerRef.current = window.requestAnimationFrame(() => {\n      scrollTimerRef.current = undefined;\n      outerListRef.current?.[type === 'by' ? 'scrollBy' : 'scrollTo']({\n        behavior: 'smooth',\n        top: amount,\n      });\n    });\n  }, []);\n  // Cancel any remaining scrolling events if we are unmounting\n  useEffect(\n    () => () => {\n      if (scrollTimerRef.current !== undefined) {\n        window.cancelAnimationFrame(scrollTimerRef.current);\n      }\n    },\n    []\n  );\n\n  // Manually implement Page Up/Down. Based on:\n  // - https://github.com/bvaughn/react-window/issues/46#issuecomment-416073707\n  // - https://sung.codes/blog/2019/05/07/scrolling-with-page-up-down-keys-in-react-window/\n  const innerListRef = useRef<HTMLElement>(null);\n  const outerListRef = useRef<HTMLElement>(null);\n\n  const PAGE_HEIGHT = 600;\n  const ROW_HEIGHT = 60;\n\n  const itemData = useMemo<OcdItemTableRowData>(\n    () => ({\n      inventory,\n      items,\n      ocdRules,\n      onRuleChange: onRuleChange || defaultRuleChangeHandler,\n    }),\n    [defaultRuleChangeHandler, inventory, items, ocdRules, onRuleChange]\n  );\n  const itemKeyCallback = useCallback(\n    (index: number, data: OcdItemTableRowData) => data.items[index].id,\n    []\n  );\n\n  const editorButtons = useMemo(\n    () => (\n      <ButtonGroup className=\"OcdItemTable__EditorButtons\">\n        <Button\n          disabled={disableSave}\n          icon=\"saved\"\n          onClick={onSave}\n          text=\"Save all\"\n        />\n        <Button\n          disabled={disableReset}\n          icon=\"reset\"\n          onClick={onReset}\n          text=\"Discard changes\"\n        />\n        <Popover2\n          className=\"OcdItemTable__PopperFix\"\n          popoverClassName={Popover2Classes.POPOVER2_CONTENT_SIZING}\n          content={\n            <p>\n              Select an action for each item. These actions will tell\n              OCD-Cleanup how to process each item:\n              <UL>\n                <li>\n                  OCD-Cleanup will warn you about uncategorized items, but will\n                  not touch them.\n                </li>\n                <li>\n                  \"Mall sale\" will use the lowest mall price <i>at cleanup</i>,\n                  but never below the \"min price\".\n                </li>\n                <li>\"Send as gift\" actually uses Kmail, not the gift shop.</li>\n                <li>\n                  \"Crafting\" can use up other ingredients needed for the recipe,\n                  even if you marked them as \"Keep all\".\n                </li>\n                <li>\n                  \"Pulverize\" will send items to Smashbot if you can't use\n                  Pulverize or Malus, but only in aftercore.\n                </li>\n                <li>\n                  \"Reminder\" will show a reminder message during cleanup, but\n                  won't touch the item.\n                </li>\n              </UL>\n            </p>\n          }\n        >\n          <Button icon=\"help\" text=\"Help\" />\n        </Popover2>\n      </ButtonGroup>\n    ),\n    [disableReset, disableSave, onReset, onSave]\n  );\n\n  // This function must be a stable value for React to properly use memoization.\n  // Since the data prop changes whenever the OCD ruleset is modified, this\n  // component itself does not benefit from `React.memo()`. However, the\n  // underlying component _does_ benefit from `React.memo()`.\n  const OcdItemTableRowWrapper = useCallback(function OcdItemTableRowWrapper({\n    data: {ocdRules, onRuleChange, inventory, items},\n    index,\n    style,\n    isScrolling = false,\n  }: {\n    data: OcdItemTableRowData;\n    index: number;\n    style?: React.CSSProperties;\n    isScrolling?: boolean;\n  }) {\n    isScrollingRef.current = isScrolling;\n    return (\n      <OcdItemTableRow\n        inventory={inventory}\n        item={items[index]}\n        onRuleChange={onRuleChange}\n        rule={ocdRules[items[index].id]}\n        style={style}\n      />\n    );\n  },\n  []);\n\n  return (\n    <div className={classNames('OcdItemTable', className)} {...restProps}>\n      {editorButtons}\n      <div className=\"OcdItemTable__TableWrapper\">\n        <AutoSizer disableWidth>\n          {({height: measuredHeight}) => (\n            <div\n              className=\"OcdItemTable__Inner\"\n              onKeyDown={event => {\n                if (event.key === 'ArrowDown') {\n                  if (event.currentTarget === event.target) {\n                    doScroll('by', ROW_HEIGHT * 3);\n                  }\n                } else if (event.key === 'ArrowUp') {\n                  if (event.currentTarget === event.target) {\n                    doScroll('by', -ROW_HEIGHT * 3);\n                  }\n                } else if (event.key === 'PageDown') {\n                  doScroll('by', PAGE_HEIGHT);\n                } else if (event.key === 'PageUp') {\n                  doScroll('by', -PAGE_HEIGHT);\n                } else if (event.key === 'Home') {\n                  doScroll('to', 0);\n                } else if (event.key === 'End') {\n                  if (innerListRef.current) {\n                    doScroll(\n                      'to',\n                      parseFloat(innerListRef.current.style.height)\n                    );\n                  }\n                }\n              }}\n              tabIndex={-1}\n            >\n              <div className=\"OcdItemTable__HeaderRow\">\n                <div className=\"OcdItemTable__HeaderCell OcdItemTable__ColumnItemName\">\n                  Item (Amount)\n                </div>\n                <div className=\"OcdItemTable__HeaderCell OcdItemTable__ColumnClosetAmount\">\n                  <abbr title=\"Amount in Closet\">C</abbr>\n                </div>\n                <div className=\"OcdItemTable__HeaderCell OcdItemTable__ColumnStorageAmount\">\n                  <abbr title=\"Amount in Storage\">S</abbr>\n                </div>\n                <div className=\"OcdItemTable__HeaderCell OcdItemTable__ColumnDisplayCaseAmount\">\n                  <abbr title=\"Amount in Display Case\">D</abbr>\n                </div>\n                <div className=\"OcdItemTable__HeaderCell OcdItemTable__ColumnMallPrice\">\n                  <abbr title=\"5th lowest mall price\">Price</abbr>\n                </div>\n                <div className=\"OcdItemTable__HeaderCell OcdItemTable__ColumnKeepAmount\">\n                  Keep\n                </div>\n                <div className=\"OcdItemTable__HeaderCell OcdItemTable__ColumnAction\">\n                  Action\n                </div>\n              </div>\n              <FixedSizeList\n                className=\"OcdItemTable__Body\"\n                height={measuredHeight}\n                innerRef={innerListRef}\n                itemCount={items.length}\n                itemData={itemData}\n                itemKey={itemKeyCallback}\n                itemSize={ROW_HEIGHT}\n                outerRef={outerListRef}\n                overscanCount={15}\n                useIsScrolling\n                width=\"100%\"\n              >\n                {OcdItemTableRowWrapper}\n              </FixedSizeList>\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n      {editorButtons}\n    </div>\n  );\n});\n","import {H3, NonIdealState, Spinner, Tab, Tabs} from '@blueprintjs/core';\nimport {\n  CLEANUP_TABLES_CATEGORIZED_ROUTE,\n  OcdItem,\n  OcdRule,\n  OcdRuleset,\n  ReadonlyOcdRuleset,\n} from '@ocd-cleanup/common';\nimport React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {fetchGetCleanupTableCategorized, fetchSaveOcdRuleset} from '../api';\nimport {setErrorToast, setSavingToast, showInfoToast} from '../toaster';\nimport {ocdActionToString, typeCheck} from '../util';\nimport {OcdItemTable, RuleChangeHandler} from './OcdItemTable';\nimport './PanelCategorizedItems.css';\n\nconst OCD_TAB_TYPES = {\n  all: 0,\n  closet: 0,\n  craft: 0,\n  display: 0,\n  dispose: 0,\n  gift: 0,\n  inventory: 0,\n  keep: 0,\n  mall: 0,\n  pulverize: 0,\n  reminder: 0,\n  search: 0,\n  stash: 0,\n  untinker: 0,\n  use: 0,\n};\n\n/**\n * Note: Tab types do not match OCD actions 1:1. For example, autosell (AUTO)\n * and discard (DISC) actions are shown together under \"dispose\".\n */\ntype OcdTabType = keyof typeof OCD_TAB_TYPES;\nconst isOcdTabType = (tabId: unknown): tabId is OcdTabType =>\n  typeof tabId === 'string' && OCD_TAB_TYPES.hasOwnProperty(tabId);\n\nconst categorizeItemsForTabs = (\n  items: readonly Readonly<OcdItem>[],\n  ocdRules: ReadonlyOcdRuleset\n) =>\n  items.reduce(\n    (itemsForTabs, item) => {\n      const rule = ocdRules[item.id];\n      if (rule) {\n        itemsForTabs.all.push(item);\n        switch (rule.action) {\n          case 'CLST':\n            itemsForTabs.closet.push(item);\n            break;\n          case 'MAKE':\n            itemsForTabs.craft.push(item);\n            break;\n          case 'AUTO':\n          case 'DISC':\n            itemsForTabs.dispose.push(item);\n            break;\n          case 'BREAK':\n          case 'USE':\n            itemsForTabs.use.push(item);\n            break;\n          case 'DISP':\n            itemsForTabs.display.push(item);\n            break;\n          case 'KEEP':\n            itemsForTabs.keep.push(item);\n            break;\n          case 'GIFT':\n            itemsForTabs.gift.push(item);\n            break;\n          case 'MALL':\n            itemsForTabs.mall.push(item);\n            break;\n          case 'PULV':\n            itemsForTabs.pulverize.push(item);\n            break;\n          case 'TODO':\n            itemsForTabs.reminder.push(item);\n            break;\n          case 'UNTN':\n            itemsForTabs.untinker.push(item);\n            break;\n          case 'CLAN':\n            itemsForTabs.stash.push(item);\n            break;\n        }\n      }\n      return itemsForTabs;\n    },\n    {\n      /** This includes only items that have an OCD rule defined. */\n      all: [] as OcdItem[],\n      closet: [] as OcdItem[],\n      craft: [] as OcdItem[],\n      display: [] as OcdItem[],\n      dispose: [] as OcdItem[],\n      gift: [] as OcdItem[],\n      keep: [] as OcdItem[],\n      mall: [] as OcdItem[],\n      pulverize: [] as OcdItem[],\n      reminder: [] as OcdItem[],\n      stash: [] as OcdItem[],\n      untinker: [] as OcdItem[],\n      use: [] as OcdItem[],\n    }\n  );\n\n/** Empty object used as placeholder for the OCD ruleset being edited. */\nconst EMPTY_OCD_RULES = Object.freeze({});\n\n/**\n * Panel for editing the player's OCD-Cleanup ruleset.\n */\nexport const PanelCategorizedItems = () => {\n  // Providing default values is not ideal.\n  // TODO: Add \"loading\" and \"network error\" states to <TabbedOcdRulesetEditor>\n  // and handle network errors properly.\n  const {data, error: loadingError, isValidating: isLoading, mutate} = useSWR(\n    CLEANUP_TABLES_CATEGORIZED_ROUTE,\n    async () => {\n      const response = await fetchGetCleanupTableCategorized();\n      // Items must be sorted by ID\n      response.result.items.sort((itemA, itemB) => itemA.id - itemB.id);\n      return response.result;\n    }\n  );\n\n  const [activeOcdRules, setActiveOcdRules] = useState<OcdRuleset>(\n    EMPTY_OCD_RULES\n  );\n\n  useEffect(() => {\n    // When the data is loaded for the first time, populate activeOcdRules with\n    // the server-sent ruleset\n    if (data?.ocdRules && activeOcdRules === EMPTY_OCD_RULES) {\n      setActiveOcdRules(data.ocdRules);\n    }\n  }, [activeOcdRules, data?.ocdRules]);\n\n  const handleReset = useCallback(\n    () => data?.ocdRules && setActiveOcdRules(data.ocdRules),\n    [data?.ocdRules]\n  );\n\n  const {\n    error: savingError,\n    execute: handleSave,\n    loading: isSaving,\n  } = useAsyncCallback(() =>\n    mutate(async data => {\n      if (!data) {\n        throw new Error(\"Cannot save ruleset when we don't have any data yet\");\n      }\n      const response = await fetchSaveOcdRuleset(activeOcdRules);\n      if (!response?.result?.success) {\n        throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n      }\n      return {...data, ocdRules: activeOcdRules};\n    }, false)\n  );\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save OCD rule'),\n    [savingError]\n  );\n  useEffect(() => setSavingToast('isSaving', isSaving, 'Saving OCD rules...'), [\n    isSaving,\n  ]);\n\n  const handleOcdRuleChange: RuleChangeHandler = useCallback(\n    (itemId, newRuleOrReducer) =>\n      setActiveOcdRules(prevOcdRules => {\n        const prevRule = prevOcdRules[itemId] as OcdRule | undefined;\n        const newRule =\n          typeof newRuleOrReducer === 'function'\n            ? newRuleOrReducer(prevOcdRules[itemId] || null)\n            : newRuleOrReducer;\n\n        if (prevRule?.action !== newRule?.action) {\n          const itemName = data?.items[itemId]?.name;\n          showInfoToast(\n            newRule\n              ? `Changed action for ${itemName} to \"${ocdActionToString(\n                  newRule.action\n                )}\"`\n              : `Removed action for ${itemName}`\n          );\n        }\n\n        if (newRule) return {...prevOcdRules, [itemId]: newRule};\n        else {\n          const {[itemId]: _removed, ...restOcdRules} = prevOcdRules;\n          return restOcdRules;\n        }\n      }),\n    [data?.items]\n  );\n\n  const [tabId, setTabId] = useState<OcdTabType>('all');\n\n  // Item categories are based on the active copy of the ruleset being edited,\n  // rather than the base copy. This allows the tabs to be updated in real time\n  // when the user edits the ruleset.\n  const itemsForTabs = useMemo(\n    () => categorizeItemsForTabs(data?.items ?? [], activeOcdRules || {}),\n    [data?.items, activeOcdRules]\n  );\n\n  const isTabAvailable = itemsForTabs.hasOwnProperty(tabId)\n    ? itemsForTabs[tabId as keyof typeof itemsForTabs].length > 0\n    : true;\n  const actualTabId = isTabAvailable ? tabId : 'all';\n\n  const hasChanges = Boolean(data && data.ocdRules !== activeOcdRules);\n\n  const makeItemTable = (items: OcdItem[]) =>\n    data && (\n      <OcdItemTable\n        className=\"PanelCategorizedItems__Table\"\n        disableReset={!hasChanges}\n        disableSave={!hasChanges}\n        inventory={data.inventory}\n        items={items}\n        ocdRules={activeOcdRules}\n        onRuleChange={handleOcdRuleChange}\n        onReset={handleReset}\n        onSave={handleSave}\n      />\n    );\n\n  return (\n    <>\n      <H3>Edit Cleanup Rules</H3>\n      {data ? (\n        <Tabs\n          className=\"PanelCategorizedItems__Tabs\"\n          onChange={tabId => isOcdTabType(tabId) && setTabId(tabId)}\n          renderActiveTabPanelOnly\n          selectedTabId={actualTabId}\n        >\n          <Tab\n            id={typeCheck<OcdTabType>('all')}\n            panel={makeItemTable(itemsForTabs.all)}\n            panelClassName=\"PanelCategorizedItems__TabItem\"\n            title=\"All\"\n          />\n          {itemsForTabs.keep.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('keep')}\n              panel={makeItemTable(itemsForTabs.keep)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Keep\"\n            />\n          )}\n          {itemsForTabs.mall.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('mall')}\n              panel={makeItemTable(itemsForTabs.mall)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Mall\"\n            />\n          )}\n          {itemsForTabs.pulverize.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('pulverize')}\n              panel={makeItemTable(itemsForTabs.pulverize)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Pulverize\"\n            />\n          )}\n          {itemsForTabs.use.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('use')}\n              panel={makeItemTable(itemsForTabs.use)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Use\"\n            />\n          )}\n          {itemsForTabs.closet.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('closet')}\n              panel={makeItemTable(itemsForTabs.closet)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Closet\"\n            />\n          )}\n          {itemsForTabs.stash.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('stash')}\n              panel={makeItemTable(itemsForTabs.stash)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Clan Stash\"\n            />\n          )}\n          {itemsForTabs.craft.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('craft')}\n              panel={makeItemTable(itemsForTabs.craft)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Crafting\"\n            />\n          )}\n          {itemsForTabs.untinker.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('untinker')}\n              panel={makeItemTable(itemsForTabs.untinker)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Untinkering\"\n            />\n          )}\n          {itemsForTabs.gift.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('gift')}\n              panel={makeItemTable(itemsForTabs.gift)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Gift\"\n            />\n          )}\n          {itemsForTabs.display.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('display')}\n              panel={makeItemTable(itemsForTabs.display)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Display\"\n            />\n          )}\n          {itemsForTabs.dispose.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('dispose')}\n              panel={makeItemTable(itemsForTabs.dispose)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Dispose\"\n            />\n          )}\n          {itemsForTabs.reminder.length > 0 && (\n            <Tab\n              id={typeCheck<OcdTabType>('reminder')}\n              panel={makeItemTable(itemsForTabs.reminder)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Reminders\"\n            />\n          )}\n        </Tabs>\n      ) : isLoading ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </>\n  );\n};\n","/**\r\n * @file Defines requests and responses for OCD rulesets.\r\n */\r\nexport var RULESET_ROUTE = '/ruleset';\r\n//# sourceMappingURL=ruleset.js.map","import {Code, InputGroup} from '@blueprintjs/core';\nimport React from 'react';\nimport './InputGroupAffixedFileName.css';\n\ninterface InputGroupAffixedFileNameProps\n  extends React.ComponentProps<typeof InputGroup> {\n  /** File name prefix, if any */\n  fileNamePrefix?: string;\n  /** File name suffix, if any */\n  fileNameSuffix?: string;\n}\n\n/**\n * `InputGroup` for a file name with predefined prefix and/or suffix.\n */\nexport const InputGroupAffixedFileName = React.memo(\n  function InputGroupAffixedFileName({\n    fileNamePrefix,\n    fileNameSuffix,\n    className = '',\n    ...restProps\n  }: InputGroupAffixedFileNameProps) {\n    return (\n      <InputGroup\n        className={`InputGroupAffixedFileName ${className}`}\n        leftElement={\n          fileNamePrefix ? (\n            <Code className=\"InputGroupAffixedFileName__Prefix\">\n              {fileNamePrefix}\n            </Code>\n          ) : undefined\n        }\n        rightElement={\n          fileNameSuffix ? (\n            <Code className=\"InputGroupAffixedFileName__Suffix\">\n              {fileNameSuffix}\n            </Code>\n          ) : undefined\n        }\n        {...restProps}\n      />\n    );\n  }\n);\n","import {\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Classes,\n  Code,\n  Dialog,\n  Divider,\n  FormGroup,\n  H3,\n  InputGroup,\n  Radio,\n  RadioGroup,\n} from '@blueprintjs/core';\nimport {CONFIG_ROUTE, OcdCleanupConfig} from '@ocd-cleanup/common';\nimport classNames from 'classnames';\nimport {dequal} from 'dequal/lite';\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {fetchGetOcdCleanupConfig, fetchSaveOcdCleanupConfig} from '../api';\nimport {setErrorToast, setSavingToast} from '../toaster';\nimport {MAX_MALL_PRICE, ZWSP} from '../util';\nimport {InputGroupAffixedFileName} from './InputGroupAffixedFileName';\nimport './PanelConfig.css';\n\nconst OCD_RULESET_PREFIX = 'OCDdata_';\nconst OCD_STOCK_PREFIX = 'OCDstock_';\nconst TXT_SUFFIX = '.txt';\n\ninterface ChangedFileEntry {\n  /** Label for this entry, shown to the user. */\n  label: string;\n  newName: string;\n  oldName: string;\n}\n\n/**\n * A `<Dialog>` that asks whether to copy over existing data or start fresh when\n * the user changes the name of an OCD data file.\n * To properly animate closing transitions, this must be rendered even if the\n * dialog is closed.\n */\nconst DialogAskCopyOnSave = React.memo(function DialogAskCopyOnSave({\n  changedFiles = [],\n  isOpen,\n  onCancel,\n  onSaveWithCopy,\n  onSaveWithoutCopy,\n}: {\n  /** Array of data files changed. */\n  changedFiles?: readonly Readonly<ChangedFileEntry>[];\n  isOpen?: boolean;\n  onCancel?: () => void;\n  onSaveWithCopy?: () => void;\n  onSaveWithoutCopy?: () => void;\n}) {\n  return (\n    <Dialog\n      canEscapeKeyClose\n      canOutsideClickClose\n      icon=\"warning-sign\"\n      isOpen={isOpen}\n      onClose={onCancel}\n      title={`Changing data file name${changedFiles.length > 1 ? 's' : ''}`}\n    >\n      <div className={Classes.DIALOG_BODY}>\n        You are about the change your data file\n        {changedFiles.length > 1 ? \"s' names\" : \"'s name\"}:\n        <ul>\n          {changedFiles.map((entry, index) => (\n            <li key={index}>\n              {entry.label}: <Code>{entry.oldName}</Code> &rArr;{' '}\n              <Code>{entry.newName}</Code>\n            </li>\n          ))}\n        </ul>\n        Do you want to copy the contents of your previous data file\n        {changedFiles.length > 1 && 's'}?\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n          <Button\n            icon=\"duplicate\"\n            text=\"Copy contents\"\n            onClick={onSaveWithCopy}\n          />\n          <Button\n            icon=\"exchange\"\n            text={`Change file name${changedFiles.length > 1 ? 's' : ''} only`}\n            onClick={onSaveWithoutCopy}\n          />\n          <Button intent=\"danger\" text=\"Cancel\" onClick={onCancel} />\n        </div>\n      </div>\n    </Dialog>\n  );\n});\n\n/**\n * Helper function that checks if first value is identical to any of the values\n * in the given array.\n */\nconst isOneOf = <T extends unknown>(\n  value: unknown,\n  compareWith: readonly T[]\n): value is T => compareWith.includes(value as T);\n\nexport const PanelConfig = () => {\n  const {data: baseConfig, error: loadingError, mutate} = useSWR(\n    CONFIG_ROUTE,\n    async () => (await fetchGetOcdCleanupConfig()).result\n  );\n\n  const [config, setConfig] = useState<OcdCleanupConfig | null>(null);\n  // When the data is loaded for the first time, synchronize config with\n  // the server-sent config\n  useEffect(() => {\n    if (baseConfig && !config) {\n      setConfig(baseConfig);\n    }\n  }, [baseConfig, config]);\n\n  // Saving config is a complicated process that can open a popup dialog asking\n  // for the user's confirmation\n  // This is why we jump through loops and hoops...\n\n  const [dialogProps, setDialogProps] = useState<\n    React.ComponentProps<typeof DialogAskCopyOnSave>\n  >({});\n  const closeDialog = useCallback(() => setDialogProps({}), []);\n\n  const {\n    loading: isSaving,\n    execute: saveConfig,\n    error: savingError,\n  } = useAsyncCallback(\n    useCallback(\n      async (shouldCopyDataFiles?: boolean) => {\n        // These are logical errors and should never happen.\n        // If they do, we don't want to catch them\n        if (!config) {\n          throw new Error('Cannot save empty config');\n        }\n        if (!baseConfig) {\n          throw new Error('Cannot overwrite an empty config object');\n        }\n\n        const changedFiles: ChangedFileEntry[] = [];\n        if (config.dataFileName !== baseConfig.dataFileName) {\n          changedFiles.push({\n            label: 'Ruleset file',\n            oldName: OCD_RULESET_PREFIX + baseConfig.dataFileName + TXT_SUFFIX,\n            newName: OCD_RULESET_PREFIX + config.dataFileName + TXT_SUFFIX,\n          });\n        }\n        if (config.stockFileName !== baseConfig.stockFileName) {\n          changedFiles.push({\n            label: 'Stock file',\n            oldName: OCD_STOCK_PREFIX + baseConfig.stockFileName + TXT_SUFFIX,\n            newName: OCD_STOCK_PREFIX + config.stockFileName + TXT_SUFFIX,\n          });\n        }\n\n        // If shouldCopyDataFiles is not explicitly given, display a dialog asking\n        // the user what to do\n        if (changedFiles.length && shouldCopyDataFiles === undefined) {\n          setDialogProps({isOpen: true, changedFiles});\n          return;\n        }\n\n        const response = await fetchSaveOcdCleanupConfig(\n          config,\n          shouldCopyDataFiles\n        );\n        if (!response?.result?.success) {\n          throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n        }\n        mutate(config);\n      },\n      [baseConfig, config, mutate]\n    )\n  );\n\n  const hasChanges = !dequal(config, baseConfig);\n  const setConfigSafe = useCallback(\n    (configOrReducer: React.SetStateAction<OcdCleanupConfig>) =>\n      setConfig(\n        typeof configOrReducer === 'function'\n          ? config => config && configOrReducer(config)\n          : configOrReducer\n      ),\n    []\n  );\n\n  const isDisabled = !baseConfig || !config || isSaving;\n\n  useEffect(\n    () => setErrorToast('loadingError', loadingError, 'Cannot load config'),\n    [loadingError]\n  );\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save config'),\n    [savingError]\n  );\n  useEffect(() => setSavingToast('isSaving', isSaving, 'Saving config...'), [\n    isSaving,\n  ]);\n\n  const isMallMultiInputDisabled = isDisabled || !config?.canUseMallMulti;\n  return (\n    <>\n      <DialogAskCopyOnSave\n        onCancel={() => closeDialog()}\n        onSaveWithCopy={() => {\n          closeDialog();\n          saveConfig(true);\n        }}\n        onSaveWithoutCopy={() => {\n          closeDialog();\n          saveConfig(false);\n        }}\n        {...dialogProps}\n      />\n      <H3>Configure OCD-Cleanup</H3>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">General settings</legend>\n\n        <RadioGroup\n          disabled={isDisabled}\n          inline\n          label=\"Empty closet first before cleanup:\"\n          onChange={useCallback(\n            ({currentTarget: {value}}) => {\n              const emptyClosetMode = Number(value);\n              if (isOneOf(emptyClosetMode, [0, -1] as const)) {\n                setConfigSafe(config => ({...config, emptyClosetMode}));\n              }\n            },\n            [setConfigSafe]\n          )}\n          selectedValue={config?.emptyClosetMode}\n        >\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Never\"\n            value={0}\n          />\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Before Emptying Hangk's (recommended)\"\n            value={-1}\n          />\n        </RadioGroup>\n\n        <Divider className=\"PanelConfig__Divider\" />\n\n        <RadioGroup\n          disabled={isDisabled}\n          inline\n          label=\"Mall pricing: \"\n          onChange={useCallback(\n            ({currentTarget: {value}}) => {\n              if (isOneOf(value, ['auto', 'max'] as const)) {\n                setConfigSafe(config => ({...config, mallPricingMode: value}));\n              }\n            },\n            [setConfigSafe]\n          )}\n          selectedValue={config?.mallPricingMode}\n        >\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Automatic\"\n            value=\"auto\"\n          />\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label={`${MAX_MALL_PRICE.toLocaleString()} meat (ignores \"min price\")`}\n            value=\"max\"\n          />\n        </RadioGroup>\n\n        <Divider className=\"PanelConfig__Divider\" />\n\n        <Checkbox\n          checked={Boolean(config?.simulateOnly)}\n          className={!config ? Classes.SKELETON : undefined}\n          disabled={isDisabled}\n          onChange={({currentTarget: {checked}}) =>\n            setConfigSafe(config => ({...config, simulateOnly: checked}))\n          }\n        >\n          Simulate only <small>(no items will be cleaned up)</small>\n        </Checkbox>\n      </fieldset>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">Mall multi setup</legend>\n        <Checkbox\n          checked={Boolean(config?.canUseMallMulti)}\n          className={!config ? Classes.SKELETON : undefined}\n          disabled={isDisabled}\n          onChange={({currentTarget: {checked}}) =>\n            setConfigSafe(config => ({...config, canUseMallMulti: checked}))\n          }\n        >\n          Use mall multi\n        </Checkbox>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isMallMultiInputDisabled}\n          inline\n          intent={\n            !isMallMultiInputDisabled && !config?.mallMultiName\n              ? 'warning'\n              : undefined\n          }\n          label=\"Mall multi name:\"\n          helperText={\n            !isMallMultiInputDisabled && !config?.mallMultiName\n              ? 'No multi account'\n              : ZWSP\n          }\n        >\n          <InputGroup\n            className={!config ? Classes.SKELETON : undefined}\n            disabled={isMallMultiInputDisabled}\n            onChange={({target: {value}}) =>\n              setConfigSafe(config => ({...config, mallMultiName: value}))\n            }\n            placeholder={isMallMultiInputDisabled ? '' : 'Enter player name'}\n            value={config?.mallMultiName || ''}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled || !config?.canUseMallMulti}\n          inline\n          label=\"Mall multi Kmail text:\"\n        >\n          <InputGroup\n            className={!config ? Classes.SKELETON : undefined}\n            disabled={isDisabled || !config?.canUseMallMulti}\n            onChange={({target: {value}}) =>\n              setConfigSafe(config => ({\n                ...config,\n                mallMultiKmailMessage: value,\n              }))\n            }\n            placeholder={isMallMultiInputDisabled ? '' : 'Enter Kmail message'}\n            value={config?.mallMultiKmailMessage || ''}\n          />\n        </FormGroup>\n      </fieldset>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">Data files</legend>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled}\n          inline\n          label=\"Ruleset file:\"\n        >\n          <InputGroupAffixedFileName\n            className={classNames(\n              'PanelConfig_InputFileName',\n              !config && Classes.SKELETON\n            )}\n            disabled={isDisabled}\n            fileNamePrefix={OCD_RULESET_PREFIX}\n            fileNameSuffix={TXT_SUFFIX}\n            onChange={useCallback(\n              ({target: {value}}) =>\n                setConfigSafe(config => ({...config, dataFileName: value})),\n              [setConfigSafe]\n            )}\n            value={config?.dataFileName || ''}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled}\n          inline\n          label=\"Stock file:\"\n        >\n          <InputGroupAffixedFileName\n            className={classNames(\n              'PanelConfig_InputFileName',\n              !config && Classes.SKELETON\n            )}\n            disabled={isDisabled}\n            fileNamePrefix={OCD_STOCK_PREFIX}\n            fileNameSuffix={TXT_SUFFIX}\n            onChange={useCallback(\n              ({target: {value}}) =>\n                setConfigSafe(config => ({...config, stockFileName: value})),\n              [setConfigSafe]\n            )}\n            value={config?.stockFileName || ''}\n          />\n        </FormGroup>\n      </fieldset>\n\n      <ButtonGroup>\n        <Button\n          disabled={isDisabled || !hasChanges}\n          icon=\"floppy-disk\"\n          onClick={useCallback(() => saveConfig(), [saveConfig])}\n          text=\"Save\"\n        />\n        <Button\n          disabled={isDisabled || !hasChanges}\n          icon=\"reset\"\n          onClick={useCallback(() => baseConfig && setConfig(baseConfig), [\n            baseConfig,\n          ])}\n          text=\"Discard changes\"\n        />\n      </ButtonGroup>\n    </>\n  );\n};\n","/**\r\n * @file Defines requests and responses for OCD-Cleanup settings.\r\n */\r\nexport var CONFIG_ROUTE = '/config';\r\n//# sourceMappingURL=config.js.map","import {\n  Callout,\n  Colors,\n  H3,\n  HTMLTable,\n  NonIdealState,\n  Spinner,\n} from '@blueprintjs/core';\nimport {STATISTICS_ROUTE} from '@ocd-cleanup/common';\nimport React, {useMemo} from 'react';\nimport useSWR from 'swr';\nimport {fetchGetStatistics} from '../api';\nimport './PanelInformation.css';\n\nconst BULLET = <span className=\"PanelInformation__Bullet\">&#8943;</span>;\n\n/**\n * Panel that acts as the \"home page\", and displays general information about\n * the player's cleanup rules.\n */\nexport const PanelInformation = () => {\n  const {data, isValidating: isLoading, error: loadingError} = useSWR(\n    STATISTICS_ROUTE,\n    async () => (await fetchGetStatistics()).result\n  );\n\n  const categorizedCount = useMemo(\n    () =>\n      data\n        ? Object.values(data.categorizedItemCounts).reduce(\n            (acc, sum) => acc + sum\n          )\n        : 0,\n    [data]\n  );\n\n  return (\n    <div>\n      <H3>\n        <a\n          href=\"https://github.com/Loathing-Associates-Scripting-Society/OCD-Cleanup\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          OCD-Cleanup Manager\n        </a>\n      </H3>\n      <p>\n        Brought to you by{' '}\n        <a\n          href=\"https://github.com/Loathing-Associates-Scripting-Society\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Loathing Associates Scripting Society\n        </a>\n      </p>\n      <Callout intent=\"warning\" title=\"Manager v2 is in alpha\">\n        Using this <i>may</i> destroy your OCD-Cleanup configuration. Use at\n        your own risk.\n        <br />\n        The{' '}\n        <a href=\"/relay_OCD-Cleanup_Manager.ash?relay=true\">\n          classic OCD-Cleanup Manager\n        </a>{' '}\n        is still available.\n      </Callout>\n      <div style={{height: '0.5em'}}></div>\n      <Callout intent=\"primary\" title=\"OCD-Cleanup will be renamed soon\">\n        Check out the{' '}\n        <a\n          href=\"https://kolmafia.us/threads/26002/\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          discussion thread\n        </a>{' '}\n        or join the{' '}\n        <a\n          href=\"https://forms.gle/tV3eK51hfk9ehEkL8\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          poll (Google Forms, requires login)\n        </a>\n        .\n      </Callout>\n      {data ? (\n        categorizedCount > 0 ? (\n          <HTMLTable\n            bordered\n            className=\"PanelInformation__VerticalTable\"\n            condensed\n          >\n            <tr>\n              <th\n                style={\n                  data.uncategorizedItemCount > 0\n                    ? {color: Colors.ORANGE1}\n                    : undefined\n                }\n              >\n                Uncategorized (in inventory)\n              </th>\n              <td\n                style={\n                  data.uncategorizedItemCount > 0\n                    ? {color: Colors.ORANGE1}\n                    : undefined\n                }\n              >\n                {data.uncategorizedItemCount}\n              </td>\n            </tr>\n            <tr>\n              <th>Items in Ruleset</th>\n              <td>{categorizedCount}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Keep All</th>\n              <td>{data.categorizedItemCounts.KEEP}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Mallsell</th>\n              <td>{data.categorizedItemCounts.MALL}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Autosell/Discard</th>\n              <td>\n                {data.categorizedItemCounts.AUTO +\n                  data.categorizedItemCounts.DISC}\n              </td>\n            </tr>\n            <tr>\n              <th>{BULLET} Pulverize</th>\n              <td>{data.categorizedItemCounts.PULV}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Use or break</th>\n              <td>\n                {data.categorizedItemCounts.BREAK +\n                  data.categorizedItemCounts.USE}\n              </td>\n            </tr>\n            <tr>\n              <th>{BULLET} Put in closet</th>\n              <td>{data.categorizedItemCounts.CLST}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Put in clan stash</th>\n              <td>{data.categorizedItemCounts.CLAN}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Crafting</th>\n              <td>{data.categorizedItemCounts.MAKE}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Untinker</th>\n              <td>{data.categorizedItemCounts.UNTN}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Send as gift</th>\n              <td>{data.categorizedItemCounts.GIFT}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Put in display case</th>\n              <td>{data.categorizedItemCounts.DISP}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Remind me later</th>\n              <td>{data.categorizedItemCounts.TODO}</td>\n            </tr>\n          </HTMLTable>\n        ) : (\n          <NonIdealState\n            icon=\"help\"\n            description='If this is your first time using OCD-Cleanup, you can create cleanup rules for your items in the \"Add Items\" tab.'\n            title=\"Your OCD-Cleanup ruleset is empty or missing.\"\n          />\n        )\n      ) : isLoading ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </div>\n  );\n};\n","/**\r\n * @file Endpoint for general statistics about OCD-Cleanup.\r\n */\r\nexport var STATISTICS_ROUTE = '/statistics';\r\n//# sourceMappingURL=statistics.js.map","import {\n  Button,\n  ButtonGroup,\n  FormGroup,\n  H3,\n  NonIdealState,\n  Spinner,\n} from '@blueprintjs/core';\nimport {\n  CLEANUP_TABLES_UNCATEGORIZED_ROUTE,\n  OcdRuleset,\n} from '@ocd-cleanup/common';\nimport {dequal} from 'dequal/lite';\nimport React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {fetchGetCleanupTableUncategorized, fetchPatchOcdRuleset} from '../api';\nimport {setErrorToast, setSavingToast} from '../toaster';\nimport {OcdItemTable} from './OcdItemTable';\nimport './PanelUncategorizedItems.css';\n\nconst EMPTY_OCD_RULES = {};\n\nexport const PanelUncategorizedItems = () => {\n  // Major assumptions:\n  //\n  // - data.items contains _only_ items that are uncategorized, i.e. the server\n  //   performs the filtering for us.\n  // - ocdRules always starts as an empty ruleset. Since data.items has already\n  //   been curated, there is no need to retrieve the entire ruleset from the\n  //   server.\n  const {\n    data,\n    error: loadingError,\n    isValidating: isLoadingData,\n    mutate,\n  } = useSWR(CLEANUP_TABLES_UNCATEGORIZED_ROUTE, async () => {\n    const response = await fetchGetCleanupTableUncategorized();\n    // Items must be sorted by ID\n    response.result.items.sort((itemA, itemB) => itemA.id - itemB.id);\n    return response.result;\n  });\n\n  const [ocdRules, setOcdRules] = useState<OcdRuleset>(EMPTY_OCD_RULES);\n  const resetOcdRules = useCallback(() => setOcdRules(EMPTY_OCD_RULES), []);\n\n  const hasChanges = useMemo(() => !dequal(ocdRules, EMPTY_OCD_RULES), [\n    ocdRules,\n  ]);\n\n  const {\n    error: savingError,\n    execute: doSave,\n    loading: isSaving,\n  } = useAsyncCallback(async () => {\n    const response = await fetchPatchOcdRuleset(ocdRules);\n    if (!response?.result?.success) {\n      throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n    }\n    mutate();\n    resetOcdRules();\n  });\n\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save OCD rule'),\n    [savingError]\n  );\n  useEffect(() => setSavingToast('isSaving', isSaving, 'Saving OCD rules...'), [\n    isSaving,\n  ]);\n\n  const setAllItemsToMall = useCallback(\n    () =>\n      data &&\n      setOcdRules(({...ocdRules}) => {\n        for (const item of data.items) {\n          if (item.canMall) {\n            ocdRules[item.id] = {action: 'MALL', minPrice: 0};\n          }\n        }\n        return ocdRules;\n      }),\n    [data]\n  );\n  const setAllItemsToCloset = useCallback(\n    () =>\n      data &&\n      setOcdRules(({...ocdRules}) => {\n        for (const item of data.items) {\n          if (item.canCloset) {\n            ocdRules[item.id] = {action: 'CLST'};\n          }\n        }\n        return ocdRules;\n      }),\n    [data]\n  );\n  const setAllItemsToKeep = useCallback(\n    () =>\n      data &&\n      setOcdRules(({...ocdRules}) => {\n        for (const item of data.items) {\n          ocdRules[item.id] = {action: 'KEEP'};\n        }\n        return ocdRules;\n      }),\n    [data]\n  );\n\n  return (\n    <>\n      <H3>Uncategorized Items in Your Inventory</H3>\n      {data ? (\n        data.items.length > 0 ? (\n          <>\n            <FormGroup inline label=\"Categorize all items as...\">\n              <ButtonGroup>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item =>\n                        item.canMall && ocdRules[item.id]?.action !== 'MALL'\n                    )\n                  }\n                  onClick={setAllItemsToMall}\n                >\n                  Mallsell\n                </Button>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item =>\n                        item.canCloset && ocdRules[item.id]?.action !== 'CLST'\n                    )\n                  }\n                  onClick={setAllItemsToCloset}\n                >\n                  Closet\n                </Button>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item => ocdRules[item.id]?.action !== 'KEEP'\n                    )\n                  }\n                  onClick={setAllItemsToKeep}\n                >\n                  Keep all\n                </Button>\n              </ButtonGroup>\n            </FormGroup>\n            <OcdItemTable\n              className=\"PanelUncategorizedItems__Table\"\n              disableReset={!hasChanges}\n              disableSave={!hasChanges}\n              inventory={data.inventory}\n              items={data.items}\n              ocdRules={ocdRules}\n              onChange={setOcdRules}\n              onReset={resetOcdRules}\n              onSave={doSave}\n            />\n          </>\n        ) : (\n          <NonIdealState\n            icon={\n              <img\n                alt=\"Nothing to do\"\n                src=\"/images/adventureimages/kg_accountant.gif\"\n              />\n            }\n            title=\"Your entire inventory has been categorized\"\n            description='\"Nothing to see here, please move along.\"'\n          />\n        )\n      ) : isLoadingData ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </>\n  );\n};\n","import {Tab, Tabs} from '@blueprintjs/core';\nimport React, {useState} from 'react';\nimport './App.css';\nimport {PanelCategorizedItems} from './components/PanelCategorizedItems';\nimport {PanelConfig} from './components/PanelConfig';\nimport {PanelInformation} from './components/PanelInformation';\nimport {PanelUncategorizedItems} from './components/PanelUncategorizedItems';\nimport {typeCheck} from './util';\n\nconst MainTabs = Object.freeze({\n  categorized: 0,\n  config: 0,\n  information: 0,\n  uncategorized: 0,\n});\ntype MainTabType = keyof typeof MainTabs;\nconst DEFAULT_TAB = 'information';\n\n/**\n * Ensures that the given tab ID is a valid tab ID.\n * @param tabId Tab ID to check\n * @return Returns the original value of `tabId` if it is a valid tab ID.\n *    Otherwise, returns an appropriate default tab ID as fallback.\n */\nconst ensureValidTabType = (tabId: number | string): MainTabType =>\n  MainTabs.hasOwnProperty(tabId) ? (tabId as MainTabType) : DEFAULT_TAB;\n\nexport const App = () => {\n  const [tabId, setTabId] = useState<MainTabType>(DEFAULT_TAB);\n\n  return (\n    <div className=\"App\">\n      <Tabs\n        className=\"App__Tabs\"\n        id=\"mainTabs\"\n        onChange={tabId => setTabId(ensureValidTabType(tabId))}\n        renderActiveTabPanelOnly\n        selectedTabId={ensureValidTabType(tabId)}\n      >\n        <Tab\n          id={typeCheck<MainTabType>('information')}\n          panel={<PanelInformation />}\n          panelClassName=\"App__TabItem\"\n          title=\"Information\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('uncategorized')}\n          panel={<PanelUncategorizedItems />}\n          panelClassName=\"App__TabItem\"\n          title=\"Add Items\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('categorized')}\n          panel={<PanelCategorizedItems />}\n          panelClassName=\"App__TabItem\"\n          title=\"Edit Rules\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('config')}\n          panel={<PanelConfig />}\n          panelClassName=\"App__TabItem\"\n          title=\"Configuration\"\n        />\n      </Tabs>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"names":["_ocdActions","Object","freeze","AUTO","BREAK","CLAN","CLST","DISC","DISP","GIFT","KEEP","MAKE","MALL","PULV","TODO","UNTN","USE","Error","[object Object]","message","code","response","ApiError","prototype","name","fetchFromApi","async","path","method","body","preparedRequest","request","value","serializedRequest","_i","_a","keys","length","key","serializedValue","JSON","stringify","prepareRequestForSerialization","__spreadValues","fetchResponse","fetch","URLSearchParams","ok","text","e","error","statusText","status","json","toaster","Toaster","create","maxToasts","setErrorToast","errorMessage","show","icon","intent","String","dismiss","setSavingToast","isSaving","shouldWarnOnPulverize","item","isTradable","isOcdActionOrUnknown","hasOwnProperty","call","isOcdAction","SelectOcdAction","React","memo","className","onChange","_b","restProps","HTMLSelect","classNames","target","canMall","canBreak","canAutosell","canDiscard","style","color","Colors","ORANGE2","canGift","canStash","canPulverize","canMake","canUntinker","canUse","canCloset","canDisplay","OcdRulePicker","rule","handleActionChange","useCallback","action","oldRule","__spreadProps","recipent","shouldUseCreatableOnly","targetItem","minPrice","helperText","Intent","WARNING","FormGroup","contentClassName","inline","DANGER","label","InputGroup","placeholder","small","Checkbox","checked","currentTarget","NumericInput","majorStepSize","max","min","minorStepSize","onValueChange","Number","isInteger","Math","stepSize","OcdItemTableRow","_c","inventory","onRuleChange","_d","AnchorButton","minimal","onClick","itemDescriptionPopup","descid","open","focus","title","useMemo","alt","src","image","href","rel","dangerouslySetInnerHTML","__html","id","closet","storage","displayCase","mallPrice","toLocaleString","replace","isMallPriceAtMinimum","Tag","htmlTitle","disabled","fill","rule2","keepAmount","newRuleOrReducer","areEqual","OcdItemTable","_e","disableReset","disableSave","items","ocdRules","onReset","onSave","_f","defaultRuleChangeHandler","itemId","newRule","prevOcdRules","_removed","__restKey","scrollTimerRef","useRef","isScrollingRef","doScroll","type","amount","current","window","requestAnimationFrame","behavior","top","cancelAnimationFrame","innerListRef","outerListRef","itemData","itemKeyCallback","index2","data","editorButtons","ButtonGroup","Button","Popover2","popoverClassName","Popover2Classes.POPOVER2_CONTENT_SIZING","content","UL","OcdItemTableRowWrapper","index","isScrolling","inventory2","items2","onRuleChange2","ocdRules2","AutoSizer","disableWidth","height","measuredHeight","onKeyDown","event","ROW_HEIGHT","parseFloat","tabIndex","FixedSizeList","innerRef","itemCount","itemKey","itemSize","outerRef","overscanCount","useIsScrolling","width","OCD_TAB_TYPES","all","craft","display","dispose","gift","keep","mall","pulverize","reminder","search","stash","untinker","use","EMPTY_OCD_RULES","PanelCategorizedItems","loadingError","isValidating","isLoading","mutate","useSWR","result","sort","itemA","itemB","activeOcdRules","setActiveOcdRules","useState","handleReset","savingError","execute","handleSave","loading","useAsyncCallback","data2","success","handleOcdRuleChange","prevRule","itemName","ocdActionToString","tabId","setTabId","itemsForTabs","reduce","push","actualTabId","hasChanges","Boolean","makeItemTable","H3","Tabs","isOcdTabType","tabId2","renderActiveTabPanelOnly","selectedTabId","Tab","panel","panelClassName","Spinner","NonIdealState","description","InputGroupAffixedFileName","_g","fileNamePrefix","fileNameSuffix","_h","leftElement","Code","rightElement","DialogAskCopyOnSave","changedFiles","isOpen","onCancel","onSaveWithCopy","onSaveWithoutCopy","Dialog","canEscapeKeyClose","canOutsideClickClose","onClose","Classes.DIALOG_BODY","map","entry","oldName","newName","Classes.DIALOG_FOOTER","Classes.DIALOG_FOOTER_ACTIONS","isOneOf","compareWith","includes","PanelConfig","baseConfig","config","setConfig","dialogProps","setDialogProps","closeDialog","saveConfig","shouldCopyDataFiles","dataFileName","stockFileName","fetchSaveOcdCleanupConfig","dequal","setConfigSafe","configOrReducer","config2","isDisabled","isMallMultiInputDisabled","canUseMallMulti","RadioGroup","emptyClosetMode","selectedValue","Radio","Classes.SKELETON","Divider","mallPricingMode","simulateOnly","mallMultiName","mallMultiKmailMessage","BULLET","PanelInformation","categorizedCount","values","categorizedItemCounts","acc","sum","Callout","HTMLTable","bordered","condensed","uncategorizedItemCount","ORANGE1","PanelUncategorizedItems","isLoadingData","setOcdRules","resetOcdRules","doSave","ocdRulesPatch","setAllItemsToMall","setAllItemsToCloset","setAllItemsToKeep","some","MainTabs","categorized","information","uncategorized","ensureValidTabType","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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"}