{"version":3,"file":"philter-manager.index.73600d42.js","sources":["../../../../packages/common/build/src/api/cleanup-table.js","../../../../packages/common/build/src/data/cleanup-rule.js","../../../../packages/manager/src/api.ts","../../../../packages/common/build/src/api/base.js","../../../../packages/manager/src/toaster.tsx","../../../../packages/manager/src/util.ts","../../../../packages/manager/src/components/SelectCleanupAction.tsx","../../../../packages/manager/src/components/CleanupRulePicker.tsx","../../../../packages/manager/src/components/TableItemCleanup.tsx","../../../../packages/manager/src/components/PanelCategorizedItems.tsx","../../../../packages/common/build/src/api/ruleset.js","../../../../packages/manager/src/components/InputGroupAffixedFileName.tsx","../../../../packages/manager/src/components/PanelConfig.tsx","../../../../packages/common/build/src/api/config.js","../../../../packages/manager/src/components/PanelInformation.tsx","../../../../packages/common/build/src/api/statistics.js","../../../../packages/manager/src/components/PanelUncategorizedItems.tsx","../../../../packages/manager/src/App.tsx","../../../../packages/manager/src/index.tsx"],"sourcesContent":["/**\r\n * @file Defines routes for Cleanup Tables.\r\n */\r\nexport var CLEANUP_TABLES_CATEGORIZED_ROUTE = '/cleanup-tables/categorized';\r\nexport var CLEANUP_TABLES_UNCATEGORIZED_ROUTE = '/cleanup-tables/uncategorized';\r\n//# sourceMappingURL=cleanup-table.js.map","/**\r\n * Object whose keys are string values that make up the `CleanupAction` type.\r\n * Also used to check at runtime if a string belongs to `CleanupAction`.\r\n * The values are unused; they can be anything.\r\n */\r\nvar _cleanupActions = Object.freeze({\r\n    AUTO: 0,\r\n    BREAK: 0,\r\n    CLAN: 0,\r\n    CLST: 0,\r\n    DISC: 0,\r\n    DISP: 0,\r\n    GIFT: 0,\r\n    KEEP: 0,\r\n    MAKE: 0,\r\n    MALL: 0,\r\n    PULV: 0,\r\n    TODO: 0,\r\n    UNTN: 0,\r\n    USE: 0,\r\n});\r\n/**\r\n * Checks if the given value is a valid `CleanupAction` type.\r\n */\r\nexport var isCleanupAction = function (value) {\r\n    return typeof value === 'string' &&\r\n        Object.prototype.hasOwnProperty.call(_cleanupActions, value);\r\n};\r\n//# sourceMappingURL=cleanup-rule.js.map","/**\n * @file Methods for communicating with the relay script\n */\n\nimport {\n  CLEANUP_TABLES_CATEGORIZED_ROUTE,\n  CLEANUP_TABLES_UNCATEGORIZED_ROUTE,\n  CONFIG_ROUTE,\n  ErrorResponseBase,\n  INVENTORY_ROUTE,\n  PhilterConfig,\n  prepareRequestForSerialization,\n  ReadonlyCleanupRuleset,\n  ReadonlyCleanupRulesetPatch,\n  RELAY_SCRIPT_FILE,\n  Request,\n  RequestMethodFor,\n  Response,\n  Routes,\n  RULESET_ROUTE,\n  STATISTICS_ROUTE,\n} from '@philter/common';\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * API error class. Thrown when the API returns an error response.\n */\nexport class ApiError extends Error {\n  /** Error code. This does _not_ map 1:1 to HTTP error codes. */\n  readonly code: number;\n  /** Error response object returned by the API. */\n  readonly response: unknown;\n\n  constructor(message: string, code: number, response: unknown) {\n    super(message);\n    this.code = code;\n    this.response = response;\n  }\n}\nApiError.prototype.name = 'ApiError';\n\n/**\n * Fetches data using routes and methods defined in `@philter/common`.\n * @param path Request route\n * @param method Request method\n * @return Asynchronous fetcher callback\n * @throws {ApiError}\n */\nconst fetchFromApi = async <\n  Path extends keyof Routes,\n  Method extends RequestMethodFor<Path>\n>(\n  path: Path,\n  method: Method,\n  body: Readonly<Omit<Request<Path, Method>, 'path' | 'method'>>\n) => {\n  const preparedRequest = prepareRequestForSerialization({\n    path,\n    method,\n    ...body,\n  });\n\n  // KoLmafia requires the `relay=true` parameter in order to execute JavaScript\n  // -based relay scripts.\n  const fetchResponse = await fetch(`/${RELAY_SCRIPT_FILE}?relay=true`, {\n    body: new URLSearchParams(preparedRequest),\n    method: 'POST',\n  });\n  if (!fetchResponse.ok) {\n    let text;\n    try {\n      text = await fetchResponse.text();\n    } catch (e) {\n      // Crude approach, but text() only fails under rare circumstances...\n      console.error(e);\n    }\n    throw new ApiError(fetchResponse.statusText, fetchResponse.status, text);\n  }\n\n  let response;\n  try {\n    response = (await fetchResponse.json()) as\n      | Response<Path, Method>\n      | ErrorResponseBase;\n  } catch (error) {\n    throw new ApiError(\n      `Invalid JSON returned from server (${error})\\nResponse: ${response}`,\n      500,\n      response\n    );\n  }\n\n  if ('error' in response) {\n    throw new ApiError(\n      response.error.message,\n      response.error.code,\n      response.error.message\n    );\n  }\n  return response;\n};\n\nexport const fetchGetCleanupTableCategorized = () =>\n  fetchFromApi(CLEANUP_TABLES_CATEGORIZED_ROUTE, 'get', {});\n\nexport const fetchGetCleanupTableUncategorized = () =>\n  fetchFromApi(CLEANUP_TABLES_UNCATEGORIZED_ROUTE, 'get', {});\n\nexport const fetchSaveCleanupRuleset = (cleanupRules: ReadonlyCleanupRuleset) =>\n  fetchFromApi(RULESET_ROUTE, 'post', {cleanupRules});\n\nexport const fetchPatchCleanupRuleset = (\n  cleanupRulesPatch: ReadonlyCleanupRulesetPatch\n) => fetchFromApi(RULESET_ROUTE, 'patch', {cleanupRulesPatch});\n\nexport const fetchInventoryState = () =>\n  fetchFromApi(INVENTORY_ROUTE, 'get', {});\n\nexport const fetchGetPhilterConfig = () =>\n  fetchFromApi(CONFIG_ROUTE, 'get', {});\n\nexport const fetchSavePhilterConfig = (\n  config: Readonly<PhilterConfig>,\n  shouldCopyDataFiles?: boolean\n) => fetchFromApi(CONFIG_ROUTE, 'post', {config, shouldCopyDataFiles});\n\nexport const fetchGetStatistics = () =>\n  fetchFromApi(STATISTICS_ROUTE, 'get', {});\n","/**\r\n * @file Defines base types for API requests and responses.\r\n */\r\nfunction isValidRequestMethod(value) {\r\n    return value === 'get' || value === 'patch' || value === 'post';\r\n}\r\nfunction isRequestBasePropertyName(value) {\r\n    return value === 'method' || value === 'path';\r\n}\r\n/**\r\n * Converts a `RequestBase` object to a flat object suitable for serialization.\r\n *\r\n * A client should serialize the returned value using `URLSearchParams()` before\r\n * sending it over the network.\r\n */\r\nexport function prepareRequestForSerialization(request) {\r\n    var serializedRequest = {};\r\n    for (var _i = 0, _a = Object.keys(request); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        // Known keys should not be serialized, but passed as-is.\r\n        if (isRequestBasePropertyName(key)) {\r\n            serializedRequest[key] = request[key];\r\n        }\r\n        else {\r\n            // All other keys should be serialized, even if their values are strings.\r\n            // JSON.stringify() can return undefined if the input is undefined.\r\n            // TypeScript currently doesn't check this, so we must do so manually.\r\n            var serializedValue = JSON.stringify(request[key]);\r\n            // Skip undefined fields\r\n            if (serializedValue !== undefined) {\r\n                serializedRequest[key] = serializedValue;\r\n            }\r\n        }\r\n    }\r\n    return serializedRequest;\r\n}\r\n/**\r\n * Converts a flat object to a `RequestBase`.\r\n *\r\n * A server should call this on the return value of `formFields()`\r\n * (analogous to `request.body` in Express.js).\r\n * @param wrappedRequest Wrapped request object\r\n * @throws {Error} If any `RequestBase` properties are missing or invalid\r\n */\r\nexport function unwrapDeserializedRequest(wrappedRequest) {\r\n    // Cast to Partial<> so that TypeScript type-checks our property access\r\n    var uncheckedRequest = wrappedRequest;\r\n    if (typeof uncheckedRequest.method !== 'string') {\r\n        throw new Error('Missing URL/form parameter: method');\r\n    }\r\n    else if (!isValidRequestMethod(uncheckedRequest.method)) {\r\n        throw new Error(\"Invalid URL/form parameter: method=\" + uncheckedRequest.method);\r\n    }\r\n    if (typeof uncheckedRequest.path !== 'string') {\r\n        throw new Error('Missing URL/form parameter: path');\r\n    }\r\n    var request = {};\r\n    for (var _i = 0, _a = Object.keys(wrappedRequest); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        // Known keys are passed as-is.\r\n        // All other keys are deserialized.\r\n        request[key] = isRequestBasePropertyName(key)\r\n            ? wrappedRequest[key]\r\n            : JSON.parse(wrappedRequest[key]);\r\n    }\r\n    return request;\r\n}\r\n//# sourceMappingURL=base.js.map","/**\n * @file Provides methods for toast-based notifications.\n */\n\nimport {Toaster} from '@blueprintjs/core';\nimport React from 'react';\nimport {ApiError} from './api';\n\n/** Globally shared `<Toaster>` instance for displaying notifications. */\nexport const toaster = Toaster.create({maxToasts: 1});\n\n/**\n * Render `error` as a toast message.\n * @param error Error object. If this is a falsy value, the toast message will\n *    be removed.\n * @param errorMessage Message to show\n * @param key Used to uniquely identify the toast message\n */\nexport const setErrorToast = (\n  key: string,\n  error: unknown,\n  errorMessage: string\n): void => {\n  if (error) {\n    toaster.show(\n      {\n        icon: 'warning-sign',\n        intent: 'warning',\n        message:\n          error instanceof ApiError ? (\n            <>\n              {errorMessage}: {error.message}\n              <br />\n              Response: {String(error.response)}\n            </>\n          ) : (\n            `${errorMessage}: ${error}`\n          ),\n      },\n      key\n    );\n  } else {\n    toaster.dismiss(key);\n  }\n};\n\n/**\n * Display an informational toast message.\n * @param message Message to show\n */\nexport const showInfoToast = (message: string): void => {\n  toaster.show({icon: 'info-sign', message});\n};\n\n/**\n * Display a toast message to indicate that the app is saving something.\n * @param key Used to uniquely identify the toast message\n * @param isSaving Whether to show or hide the toast\n * @param message Message to show\n */\nexport const setSavingToast = (\n  key: string,\n  isSaving: boolean,\n  message: string\n): void => {\n  if (isSaving) {\n    toaster.show({icon: 'floppy-disk', intent: 'primary', message}, key);\n  } else {\n    toaster.dismiss(key);\n  }\n};\n","/**\n * @file Utilities that don't quite fit anywhere else.\n */\n\nimport {CleanupAction, ItemInfo} from '@philter/common';\n\n/**\n * Maximum possible mallsell price for any item.\n * This is a limit enforced by KoL.\n */\nexport const MAX_MALL_PRICE = 999_999_999 as const;\n\n/**\n * Zero-width space character. This can be used to allow browsers to break long\n * words across multiple lines, or as an empty placeholder.\n */\nexport const ZWSP = '\\u200B';\n\n/**\n * @param action Cleanup action\n * @return Human-readable short name for the action\n */\nexport const cleanupActionToString = (action: CleanupAction): string => {\n  switch (action) {\n    case 'AUTO':\n      return 'Autosell';\n    case 'BREAK':\n      return 'Break apart';\n    case 'CLAN':\n      return 'Put in clan stash';\n    case 'CLST':\n      return 'Closet';\n    case 'DISC':\n      return 'Discard';\n    case 'DISP':\n      return 'Display';\n    case 'GIFT':\n      return 'Send as gift';\n    case 'KEEP':\n      return 'Keep all';\n    case 'MAKE':\n      return 'Craft';\n    case 'MALL':\n      return 'Mall sale';\n    case 'PULV':\n      return 'Pulverize';\n    case 'TODO':\n      return 'Reminder';\n    case 'UNTN':\n      return 'Untinker';\n    case 'USE':\n      return 'Use';\n    default:\n      // If we forget an action, TypeScript will catch this as a compile error\n      return ((n: never) => n)(action);\n  }\n};\n\n/**\n * @param item Item type to check\n * @return Whether Philter Manager should warn about pulverizing the item\n */\nexport const shouldWarnOnPulverize = (item: Readonly<ItemInfo>): boolean =>\n  !item.isTradable;\n\n/**\n * Identity function that returns the first argument as-is.\n * This is primarily intended to perform compile-time type-checks against union\n * types or enums.\n * **This does NOT perform any runtime type checks!**\n * @param value\n * @return `value` unmodified\n */\nexport const typeCheck = <T>(value: T): T => value;\n","import {Colors, HTMLSelect} from '@blueprintjs/core';\nimport {isCleanupAction, CleanupAction, ItemInfo} from '@philter/common';\nimport classNames from 'classnames';\nimport React, {memo} from 'react';\nimport {shouldWarnOnPulverize, typeCheck} from '../util';\nimport './SelectCleanupAction.css';\n\n/**\n * A fallback value used to denote uncategorized items in the `<select>`.\n */\nexport const UNKNOWN_CLEANUP_ACTION = 'UNKN';\nexport type CleanupActionOrUnknown =\n  | CleanupAction\n  | typeof UNKNOWN_CLEANUP_ACTION;\n\nconst isCleanupActionOrUnknown = (\n  value: unknown\n): value is CleanupActionOrUnknown =>\n  value === UNKNOWN_CLEANUP_ACTION || isCleanupAction(value);\n\ninterface SelectCleanupActionPropsBase {\n  item: Readonly<ItemInfo>;\n  onChange: (value: CleanupActionOrUnknown) => void;\n  value: CleanupActionOrUnknown;\n}\n\ninterface SelectCleanupActionProps\n  extends SelectCleanupActionPropsBase,\n    Omit<\n      React.ComponentProps<typeof HTMLSelect>,\n      keyof SelectCleanupActionPropsBase\n    > {}\n\n/**\n * `<HTMLSelect>` element for picking a cleanup action.\n */\n// eslint-disable-next-line prefer-arrow-callback\nexport const SelectCleanupAction = memo(function SelectCleanupAction({\n  className,\n  item,\n  onChange,\n  value,\n  ...restProps\n}: SelectCleanupActionProps) {\n  return (\n    <HTMLSelect\n      className={classNames('SelectCleanupAction', className)}\n      onChange={e =>\n        isCleanupActionOrUnknown(e.target.value) && onChange(e.target.value)\n      }\n      value={value}\n      {...restProps}\n    >\n      <option value={typeCheck<CleanupActionOrUnknown>(UNKNOWN_CLEANUP_ACTION)}>\n        (uncategorized)\n      </option>\n      <option value={typeCheck<CleanupActionOrUnknown>('KEEP')}>\n        Keep all\n      </option>\n      {item.canMall && (\n        <option value={typeCheck<CleanupActionOrUnknown>('MALL')}>\n          Mall sale\n        </option>\n      )}\n      {item.canBreak && (\n        <option value={typeCheck<CleanupActionOrUnknown>('BREAK')}>\n          Break apart\n        </option>\n      )}\n      {item.canAutosell && (\n        <option value={typeCheck<CleanupActionOrUnknown>('AUTO')}>\n          Autosell\n        </option>\n      )}\n      {item.canDiscard && (\n        <option\n          style={{color: Colors.ORANGE2}}\n          value={typeCheck<CleanupActionOrUnknown>('DISC')}\n        >\n          Discard\n        </option>\n      )}\n      {item.canGift && (\n        <option value={typeCheck<CleanupActionOrUnknown>('GIFT')}>\n          Send as gift\n        </option>\n      )}\n      {item.canStash && (\n        <option value={typeCheck<CleanupActionOrUnknown>('CLAN')}>\n          Put in clan stash\n        </option>\n      )}\n      {item.canPulverize && (\n        <option\n          style={\n            shouldWarnOnPulverize(item) ? {color: Colors.ORANGE2} : undefined\n          }\n          value={typeCheck<CleanupActionOrUnknown>('PULV')}\n        >\n          Pulverize\n        </option>\n      )}\n      {item.canMake && (\n        <option value={typeCheck<CleanupActionOrUnknown>('MAKE')}>\n          Craft...\n        </option>\n      )}\n      {item.canUntinker && (\n        <option value={typeCheck<CleanupActionOrUnknown>('UNTN')}>\n          Untinker\n        </option>\n      )}\n      {item.canUse && (\n        <option value={typeCheck<CleanupActionOrUnknown>('USE')}>Use</option>\n      )}\n      {item.canCloset && (\n        <option value={typeCheck<CleanupActionOrUnknown>('CLST')}>\n          Closet\n        </option>\n      )}\n      {item.canDisplay && (\n        <option value={typeCheck<CleanupActionOrUnknown>('DISP')}>\n          Display\n        </option>\n      )}\n      <option value={typeCheck<CleanupActionOrUnknown>('TODO')}>\n        Reminder\n      </option>\n    </HTMLSelect>\n  );\n});\n","import {\n  Checkbox,\n  FormGroup,\n  InputGroup,\n  Intent,\n  NumericInput,\n} from '@blueprintjs/core';\nimport {ItemInfo, CleanupRule} from '@philter/common';\nimport React, {useCallback} from 'react';\nimport {MAX_MALL_PRICE, shouldWarnOnPulverize} from '../util';\nimport './CleanupRulePicker.css';\nimport {\n  CleanupActionOrUnknown,\n  SelectCleanupAction,\n  UNKNOWN_CLEANUP_ACTION,\n} from './SelectCleanupAction';\n\n// Note: We use one condition per each conditional option, which allows the\n// backend to decide what can be done with each item.\nexport const CleanupRulePicker = ({\n  item,\n  rule,\n  onChange,\n}: {\n  item: Readonly<ItemInfo>;\n  /**\n   * Callback that accepts a new rule, or `null` if the user changed the rule\n   * to \"(uncategorized)\".\n   * The argument is the new rule, or an updater function that takes the\n   * previous rule as argument and returns a new rule.\n   */\n  onChange?: (\n    newRuleOrReducer: React.SetStateAction<CleanupRule | null>\n  ) => void;\n  rule: Readonly<CleanupRule> | null;\n}): JSX.Element => {\n  const handleActionChange = useCallback(\n    (action: CleanupActionOrUnknown) => {\n      if (!onChange) return;\n      onChange(oldRule => {\n        if (action === oldRule?.action) return oldRule;\n\n        // If the action type changes to another action that requires additional\n        // parameters, initialize these parameters.\n        // Note: This means that additional parameters are NOT remembered when\n        // the user switches an action. This may be undesirable...perhaps use\n        // some internal state to maintain this, or let the parent component\n        // handle it?\n        if (action === UNKNOWN_CLEANUP_ACTION) {\n          return null;\n        } else if (action === 'GIFT') {\n          return {...oldRule, action, message: '', recipent: ''};\n        } else if (action === 'MAKE') {\n          return {\n            ...oldRule,\n            action,\n            shouldUseCreatableOnly: false,\n            targetItem: '',\n          };\n        } else if (action === 'MALL') {\n          return {...oldRule, action, minPrice: 0};\n        } else if (action === 'TODO') {\n          return {...oldRule, action, message: ''};\n        } else {\n          return {...oldRule, action};\n        }\n      });\n    },\n    [onChange]\n  );\n\n  let helperText;\n  let intent;\n\n  if (rule) {\n    if (rule.action === 'PULV' && shouldWarnOnPulverize(item)) {\n      helperText = 'You will pulverize an untradable item.';\n      intent = Intent.WARNING;\n    } else if (rule.action === 'DISC') {\n      helperText = 'You will gain no meat from discarding.';\n      intent = Intent.WARNING;\n    }\n  }\n\n  return (\n    <FormGroup\n      className=\"CleanupRulePicker\"\n      helperText={helperText}\n      intent={intent}\n    >\n      {/* Wrap child elements inside a <div>. This separates them from the\n          helper text <div>, which is injected by the outer <FormGroup>.\n          This separation allows the children to be arranged on a single \"row\"\n          with the helper text under them. */}\n      <div className=\"CleanupRulePicker__Inputs\">\n        <SelectCleanupAction\n          className=\"CleanupRulePicker__Child\"\n          item={item}\n          onChange={handleActionChange}\n          value={rule ? rule.action : UNKNOWN_CLEANUP_ACTION}\n        />\n\n        {!rule ? null : rule.action === 'GIFT' ? (\n          <>\n            <FormGroup\n              className=\"CleanupRulePicker__Child\"\n              contentClassName=\"CleanupRulePicker__InputGiftRecipent\"\n              helperText={!rule.recipent && 'No recipent name'}\n              inline\n              intent={rule.recipent ? undefined : Intent.DANGER}\n              label=\"to\"\n            >\n              <InputGroup\n                className=\"CleanupRulePicker__InputText\"\n                intent={rule.recipent ? undefined : Intent.DANGER}\n                onChange={e => onChange?.({...rule, recipent: e.target.value})}\n                placeholder=\"Player name\"\n                small\n                value={rule.recipent}\n              />\n            </FormGroup>\n            <FormGroup\n              className=\"CleanupRulePicker__Child\"\n              contentClassName=\"CleanupRulePicker__InputGiftMessage\"\n              inline\n              label=\"with\"\n            >\n              <InputGroup\n                className=\"CleanupRulePicker__InputText\"\n                onChange={e => onChange?.({...rule, message: e.target.value})}\n                placeholder=\"Kmail message\"\n                small\n                value={rule.message}\n              />\n            </FormGroup>\n          </>\n        ) : rule.action === 'MAKE' ? (\n          <>\n            <FormGroup\n              className=\"CleanupRulePicker__Child\"\n              contentClassName=\"CleanupRulePicker__InputMakeTarget\"\n              helperText={!rule.targetItem && 'No item name'}\n              inline\n              intent={!rule.targetItem ? Intent.DANGER : undefined}\n              label=\"into\"\n            >\n              <InputGroup\n                className=\"CleanupRulePicker__InputText\"\n                intent={!rule.targetItem ? Intent.DANGER : undefined}\n                onChange={e =>\n                  onChange?.({...rule, targetItem: e.target.value})\n                }\n                placeholder=\"Item name\"\n                small\n                value={rule.targetItem}\n              />\n            </FormGroup>\n            <Checkbox\n              checked={rule.shouldUseCreatableOnly}\n              className=\"CleanupRulePicker__Child CleanupRulePicker__Checkbox\"\n              onChange={e =>\n                onChange?.({\n                  ...rule,\n                  shouldUseCreatableOnly: e.currentTarget.checked,\n                })\n              }\n            >\n              <span className=\"CleanupRulePicker__CheckBoxText\">\n                Only use available ingredients\n              </span>\n            </Checkbox>\n          </>\n        ) : rule.action === 'MALL' ? (\n          <FormGroup\n            className=\"CleanupRulePicker__Child\"\n            contentClassName=\"CleanupRulePicker__InputMallMinPrice\"\n            inline\n            label=\"min price\"\n          >\n            <NumericInput\n              majorStepSize={100}\n              max={MAX_MALL_PRICE}\n              min={0}\n              minorStepSize={null}\n              onValueChange={value => {\n                if (Number.isInteger(value)) {\n                  onChange?.({\n                    ...rule,\n                    minPrice: Math.max(0, Math.min(MAX_MALL_PRICE, value)),\n                  });\n                }\n              }}\n              stepSize={1}\n              value={rule.minPrice}\n            />\n          </FormGroup>\n        ) : rule.action === 'TODO' ? (\n          <FormGroup\n            className=\"CleanupRulePicker__Child\"\n            contentClassName=\"CleanupRulePicker__InputTodoMessage\"\n            inline\n            label=\"with message:\"\n          >\n            <InputGroup\n              className=\"CleanupRulePicker__InputText\"\n              onChange={e => onChange?.({...rule, message: e.target.value})}\n              placeholder=\"Enter reminder message\"\n              small\n              value={rule.message}\n            />\n          </FormGroup>\n        ) : null}\n      </div>\n    </FormGroup>\n  );\n};\n","import {\n  AnchorButton,\n  Button,\n  ButtonGroup,\n  NumericInput,\n  Tag,\n  UL,\n} from '@blueprintjs/core';\nimport {Classes as Popover2Classes, Popover2} from '@blueprintjs/popover2';\nimport {\n  ItemInfo,\n  CleanupRule,\n  CleanupRuleset,\n  ReadonlyInventoryState,\n  ReadonlyCleanupRuleset,\n} from '@philter/common';\nimport classNames from 'classnames';\nimport React, {memo, useCallback, useEffect, useMemo, useRef} from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport {areEqual, FixedSizeList} from 'react-window';\nimport './TableItemCleanup.css';\nimport {CleanupRulePicker} from './CleanupRulePicker';\n\n/* eslint-disable react/no-unescaped-entities */\n\n/**\n * Adds a zero-width space (ZWSP) after each comma (`,`) in the given string.\n * This allows the `overflow-wrap: break-word` CSS rule to break long numbers\n * across multiple lines.\n */\nconst addZwspAfterComma = (str: string) => str.replace(/,/g, ',\\u200B');\n\n/**\n * Launches the in-game item description page in a popup window.\n * @param descid Item descid\n */\nconst itemDescriptionPopup = (descid: string) => {\n  window\n    .open(`/desc_item.php?whichitem=${descid}`, 'name', 'height=200,width=214')\n    ?.focus();\n};\n\nexport type RuleChangeHandler = (\n  itemId: number,\n  newRuleOrReducer: React.SetStateAction<CleanupRule | null>\n) => void;\n\ninterface TableItemCleanupRowProps extends React.ComponentProps<'div'> {\n  inventory: ReadonlyInventoryState;\n  item: Readonly<ItemInfo>;\n  onRuleChange: RuleChangeHandler;\n  rule: Readonly<CleanupRule | null>;\n}\n\n/**\n * Row component for `<TableItemCleanup/>`.\n */\n// eslint-disable-next-line prefer-arrow-callback\nconst TableItemCleanupRow = memo(function TableItemCleanupRow({\n  className,\n  inventory,\n  item,\n  onRuleChange,\n  rule,\n  ...restProps\n}: TableItemCleanupRowProps) {\n  return (\n    <div className={`TableItemCleanup__Row ${className || ''}`} {...restProps}>\n      <div className=\"TableItemCleanup__Cell TableItemCleanup__ColumnItemName\">\n        <AnchorButton\n          className=\"TableItemCleanup__ItemImageLink\"\n          minimal\n          onClick={useCallback(() => itemDescriptionPopup(item.descid), [\n            item.descid,\n          ])}\n          title=\"View item description\"\n        >\n          {useMemo(\n            () => (\n              <img\n                className=\"TableItemCleanup__ItemImage\"\n                alt={item.name}\n                src={`/images/itemimages/${item.image}`}\n              />\n            ),\n            [item]\n          )}\n        </AnchorButton>\n        <AnchorButton\n          className=\"TableItemCleanup__ItemNameLink\"\n          href={`https://kol.coldfront.net/thekolwiki/index.php/Special:Search?search=${item.name}&go=Go`}\n          minimal\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          title=\"Visit KoL wiki page\"\n        >\n          {useMemo(\n            () => (\n              <>\n                <span dangerouslySetInnerHTML={{__html: item.name}}></span>\n                {inventory.inventory[item.id] > 0 && (\n                  <>\n                    {' '}\n                    <i>({inventory.inventory[item.id]})</i>\n                  </>\n                )}\n              </>\n            ),\n            [inventory, item]\n          )}\n        </AnchorButton>\n      </div>\n      <div className=\"TableItemCleanup__Cell TableItemCleanup__ColumnClosetAmount\">\n        {inventory.closet[item.id] || 0}\n      </div>\n      <div className=\"TableItemCleanup__Cell TableItemCleanup__ColumnStorageAmount\">\n        {inventory.storage[item.id] || 0}\n      </div>\n      <div className=\"TableItemCleanup__Cell TableItemCleanup__ColumnDisplayCaseAmount\">\n        {inventory.displayCase[item.id] || 0}\n      </div>\n      <div className=\"TableItemCleanup__Cell TableItemCleanup__ColumnMallPrice\">\n        {item.mallPrice && addZwspAfterComma(item.mallPrice.toLocaleString())}\n        {item.mallPrice !== null && item.isMallPriceAtMinimum && (\n          <Tag\n            className=\"TableItemCleanup__ColumnMallPrice--minimum\"\n            htmlTitle=\"Is at minimum mall price\"\n            intent=\"primary\"\n            minimal\n          >\n            min\n          </Tag>\n        )}\n      </div>\n      <div className=\"TableItemCleanup__Cell TableItemCleanup__ColumnKeepAmount\">\n        <NumericInput\n          className=\"TableItemCleanup__InputKeepAmount\"\n          disabled={!rule || rule.action === 'KEEP'}\n          fill\n          majorStepSize={10}\n          min={0}\n          minorStepSize={null}\n          onValueChange={useCallback(\n            (value: number) => {\n              if (Number.isInteger(value)) {\n                onRuleChange(\n                  item.id,\n                  rule => rule && {...rule, keepAmount: value}\n                );\n              }\n            },\n            [item.id, onRuleChange]\n          )}\n          stepSize={1}\n          value={rule?.keepAmount || 0}\n        />\n      </div>\n      <div className=\"TableItemCleanup__Cell TableItemCleanup__ColumnAction\">\n        <CleanupRulePicker\n          item={item}\n          onChange={useCallback(\n            newRuleOrReducer => onRuleChange(item.id, newRuleOrReducer),\n            [item.id, onRuleChange]\n          )}\n          rule={rule}\n        />\n      </div>\n    </div>\n  );\n},\nareEqual);\n\ninterface TableItemCleanupRowData {\n  inventory: ReadonlyInventoryState;\n  items: readonly Readonly<ItemInfo>[];\n  cleanupRules: ReadonlyCleanupRuleset;\n  onRuleChange: RuleChangeHandler;\n}\n\ninterface TableItemCleanupPropsBase {\n  /**\n   * Cleanup ruleset.\n   * If an item in `items` does not have a rule here, a default rule (\"UNKN\") is\n   * used.\n   */\n  cleanupRules: ReadonlyCleanupRuleset;\n  /**\n   * Whether the Reset button is disabled.\n   */\n  disableReset?: boolean;\n  /**\n   * Whether the Save button is disabled.\n   */\n  disableSave?: boolean;\n  /** Inventory state. Used to show item quantities for each row. */\n  inventory: ReadonlyInventoryState;\n  /** Items to display in the table. */\n  items: readonly Readonly<ItemInfo>[];\n  /**\n   * Callback that is called when a rule is modified.\n   * The argument is a function that takes the previous ruleset as argument and\n   * returns a new ruleset.\n   *\n   * This implementation is necessary to prevent the entire table from being\n   * re-rendered (causing lag) on every input change.\n   */\n  onChange?: (\n    updater: (prevCleanupRules: CleanupRuleset) => CleanupRuleset\n  ) => void;\n  /**\n   * Called when the user clicks the Reset button.\n   */\n  onReset?: () => void;\n  /**\n   * Called when the user edits a rule for an item.\n   * If not given, the default implementation calls `onChange` instead.\n   */\n  onRuleChange?: RuleChangeHandler;\n  /**\n   * Called when the user clicks the Save button.\n   */\n  onSave?: () => void;\n}\n\ninterface TableItemCleanupProps\n  extends TableItemCleanupPropsBase,\n    Omit<React.ComponentProps<'div'>, keyof TableItemCleanupPropsBase> {}\n\n// eslint-disable-next-line prefer-arrow-callback\nexport const TableItemCleanup = memo(function TableItemCleanup({\n  // className is already provided by React.ComponentProps<'div'>\n  // eslint-disable-next-line react/prop-types\n  className,\n  cleanupRules,\n  disableReset,\n  disableSave,\n  inventory,\n  items,\n  onChange,\n  onReset,\n  onRuleChange,\n  onSave,\n  ...restProps\n}: TableItemCleanupProps) {\n  const defaultRuleChangeHandler = useCallback(\n    (\n      itemId: number,\n      newRuleOrReducer: React.SetStateAction<CleanupRule | null>\n    ) =>\n      onChange?.(prevCleanupRules => {\n        const newRule =\n          typeof newRuleOrReducer === 'function'\n            ? newRuleOrReducer(prevCleanupRules[itemId] || null)\n            : newRuleOrReducer;\n        if (newRule) return {...prevCleanupRules, [itemId]: newRule};\n        else {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {[itemId]: _removed, ...restCleanupRules} = prevCleanupRules;\n          return restCleanupRules;\n        }\n      }),\n    [onChange]\n  );\n\n  // Smooth scrolling (behavior: \"smooth\") via keyboard is tricky.\n  // When the user holds down on the arrow up/down or page up/down keys,\n  // onKeyDown() fires way too fast, overloading the browser and causing\n  // scrolling to become extremely jittery.\n  // I tried multiple ways of debouncing this:\n  //\n  // 1. Using lodash.throttle()\n  //    - Was quite janky and forced me to set unreasonably high throttle\n  //      delays, on the order of ~500ms for page up/down. Even then, it was\n  //      unreliably janky.\n  // 2. Manually debouncing using requestAnimationFrame() or setTimeout()\n  //    - This was worse than using lodash.throttle().\n  // 3. Using `isScrolling`\n  //    - Much more reliable than the above. However, it caused long pauses\n  //      between scrolls when the user holds down a scrolling key. Also, it\n  //      didn't prevent doScroll() from being called multiple times before the\n  //      component registered `isScrolling`.\n  //\n  // I eventually landed on a combination of (2) and (3) to successfully\n  // debounce scrolling. This is still quite slow, but almost jitter-free.\n\n  // Use requestAnimationFrame() and isScrolling to throttle scroll events\n  const scrollTimerRef = useRef<number>();\n  const isScrollingRef = useRef(false);\n\n  /**\n   * Debounced scrolling function\n   * @param type\n   * @param amount Position for `to`, offset for `by`\n   */\n  const doScroll = useCallback((type: 'to' | 'by', amount: number) => {\n    if (isScrollingRef.current) return;\n    if (scrollTimerRef.current !== undefined) return;\n    scrollTimerRef.current = window.requestAnimationFrame(() => {\n      scrollTimerRef.current = undefined;\n      outerListRef.current?.[type === 'by' ? 'scrollBy' : 'scrollTo']({\n        behavior: 'smooth',\n        top: amount,\n      });\n    });\n  }, []);\n  // Cancel any remaining scrolling events if we are unmounting\n  useEffect(\n    () => () => {\n      if (scrollTimerRef.current !== undefined) {\n        window.cancelAnimationFrame(scrollTimerRef.current);\n      }\n    },\n    []\n  );\n\n  // Manually implement Page Up/Down. Based on:\n  // - https://github.com/bvaughn/react-window/issues/46#issuecomment-416073707\n  // - https://sung.codes/blog/2019/05/07/scrolling-with-page-up-down-keys-in-react-window/\n  const innerListRef = useRef<HTMLElement>(null);\n  const outerListRef = useRef<HTMLElement>(null);\n\n  const PAGE_HEIGHT = 600;\n  const ROW_HEIGHT = 60;\n\n  const itemData = useMemo<TableItemCleanupRowData>(\n    () => ({\n      inventory,\n      items,\n      cleanupRules,\n      onRuleChange: onRuleChange || defaultRuleChangeHandler,\n    }),\n    [defaultRuleChangeHandler, inventory, items, cleanupRules, onRuleChange]\n  );\n  const itemKeyCallback = useCallback(\n    (index: number, data: TableItemCleanupRowData) => data.items[index].id,\n    []\n  );\n\n  const editorButtons = useMemo(\n    () => (\n      <ButtonGroup className=\"TableItemCleanup__EditorButtons\">\n        <Button\n          disabled={disableSave}\n          icon=\"saved\"\n          onClick={onSave}\n          text=\"Save all\"\n        />\n        <Button\n          disabled={disableReset}\n          icon=\"reset\"\n          onClick={onReset}\n          text=\"Discard changes\"\n        />\n        <Popover2\n          className=\"TableItemCleanup__PopperFix\"\n          popoverClassName={Popover2Classes.POPOVER2_CONTENT_SIZING}\n          content={\n            <p>\n              Select an action for each item. These actions will tell Philter\n              how to process each item:\n              <UL>\n                <li>\n                  Philter will warn you about uncategorized items, but will not\n                  touch them.\n                </li>\n                <li>\n                  \"Mall sale\" will use the lowest mall price <i>at cleanup</i>,\n                  but never below the \"min price\".\n                </li>\n                <li>\"Send as gift\" actually uses Kmail, not the gift shop.</li>\n                <li>\n                  \"Crafting\" can use up other ingredients needed for the recipe,\n                  even if you marked them as \"Keep all\".\n                </li>\n                <li>\n                  \"Pulverize\" will send items to Smashbot if you can't use\n                  Pulverize or Malus, but only in aftercore.\n                </li>\n                <li>\n                  \"Reminder\" will show a reminder message during cleanup, but\n                  won't touch the item.\n                </li>\n              </UL>\n            </p>\n          }\n        >\n          <Button icon=\"help\" text=\"Help\" />\n        </Popover2>\n      </ButtonGroup>\n    ),\n    [disableReset, disableSave, onReset, onSave]\n  );\n\n  // This function must be a stable value for React to properly use memoization.\n  // Since the data prop changes whenever the cleanup ruleset is modified, this\n  // component itself does not benefit from `React.memo()`. However, the\n  // underlying component _does_ benefit from `React.memo()`.\n  const TableItemCleanupRowWrapper = useCallback(\n    // eslint-disable-next-line prefer-arrow-callback\n    function TableItemCleanupRowWrapper({\n      data: {cleanupRules, onRuleChange, inventory, items},\n      index,\n      style,\n      isScrolling = false,\n    }: {\n      data: TableItemCleanupRowData;\n      index: number;\n      style?: React.CSSProperties;\n      isScrolling?: boolean;\n    }) {\n      isScrollingRef.current = isScrolling;\n      return (\n        <TableItemCleanupRow\n          inventory={inventory}\n          item={items[index]}\n          onRuleChange={onRuleChange}\n          rule={cleanupRules[items[index].id]}\n          style={style}\n        />\n      );\n    },\n    []\n  );\n\n  return (\n    <div className={classNames('TableItemCleanup', className)} {...restProps}>\n      {editorButtons}\n      <div className=\"TableItemCleanup__TableWrapper\">\n        <AutoSizer disableWidth>\n          {({height: measuredHeight}) => (\n            <div\n              className=\"TableItemCleanup__Inner\"\n              onKeyDown={event => {\n                if (event.key === 'ArrowDown') {\n                  if (event.currentTarget === event.target) {\n                    doScroll('by', ROW_HEIGHT * 3);\n                  }\n                } else if (event.key === 'ArrowUp') {\n                  if (event.currentTarget === event.target) {\n                    doScroll('by', -ROW_HEIGHT * 3);\n                  }\n                } else if (event.key === 'PageDown') {\n                  doScroll('by', PAGE_HEIGHT);\n                } else if (event.key === 'PageUp') {\n                  doScroll('by', -PAGE_HEIGHT);\n                } else if (event.key === 'Home') {\n                  doScroll('to', 0);\n                } else if (event.key === 'End') {\n                  if (innerListRef.current) {\n                    doScroll(\n                      'to',\n                      parseFloat(innerListRef.current.style.height)\n                    );\n                  }\n                }\n              }}\n              tabIndex={-1}\n            >\n              <div className=\"TableItemCleanup__HeaderRow\">\n                <div className=\"TableItemCleanup__HeaderCell TableItemCleanup__ColumnItemName\">\n                  Item (Amount)\n                </div>\n                <div className=\"TableItemCleanup__HeaderCell TableItemCleanup__ColumnClosetAmount\">\n                  <abbr title=\"Amount in Closet\">C</abbr>\n                </div>\n                <div className=\"TableItemCleanup__HeaderCell TableItemCleanup__ColumnStorageAmount\">\n                  <abbr title=\"Amount in Storage\">S</abbr>\n                </div>\n                <div className=\"TableItemCleanup__HeaderCell TableItemCleanup__ColumnDisplayCaseAmount\">\n                  <abbr title=\"Amount in Display Case\">D</abbr>\n                </div>\n                <div className=\"TableItemCleanup__HeaderCell TableItemCleanup__ColumnMallPrice\">\n                  <abbr title=\"5th lowest mall price\">Price</abbr>\n                </div>\n                <div className=\"TableItemCleanup__HeaderCell TableItemCleanup__ColumnKeepAmount\">\n                  Keep\n                </div>\n                <div className=\"TableItemCleanup__HeaderCell TableItemCleanup__ColumnAction\">\n                  Action\n                </div>\n              </div>\n              <FixedSizeList\n                className=\"TableItemCleanup__Body\"\n                height={measuredHeight}\n                innerRef={innerListRef}\n                itemCount={items.length}\n                itemData={itemData}\n                itemKey={itemKeyCallback}\n                itemSize={ROW_HEIGHT}\n                outerRef={outerListRef}\n                overscanCount={15}\n                useIsScrolling\n                width=\"100%\"\n              >\n                {TableItemCleanupRowWrapper}\n              </FixedSizeList>\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n      {editorButtons}\n    </div>\n  );\n});\n","import {H3, NonIdealState, Spinner, Tab, Tabs} from '@blueprintjs/core';\nimport {\n  CleanupRule,\n  CleanupRuleset,\n  CLEANUP_TABLES_CATEGORIZED_ROUTE,\n  ItemInfo,\n  ReadonlyCleanupRuleset,\n} from '@philter/common';\nimport React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {fetchGetCleanupTableCategorized, fetchSaveCleanupRuleset} from '../api';\nimport {setErrorToast, setSavingToast, showInfoToast} from '../toaster';\nimport {cleanupActionToString, typeCheck} from '../util';\nimport './PanelCategorizedItems.css';\nimport {RuleChangeHandler, TableItemCleanup} from './TableItemCleanup';\n\nconst CLEANUP_TAB_TYPES = {\n  all: 0,\n  closet: 0,\n  craft: 0,\n  display: 0,\n  dispose: 0,\n  gift: 0,\n  inventory: 0,\n  keep: 0,\n  mall: 0,\n  pulverize: 0,\n  reminder: 0,\n  search: 0,\n  stash: 0,\n  untinker: 0,\n  use: 0,\n};\n\n/**\n * Note: Tab types do not match cleanup actions 1:1. For example, autosell\n * (AUTO) and discard (DISC) actions are shown together under \"dispose\".\n */\ntype CleanupTabType = keyof typeof CLEANUP_TAB_TYPES;\nconst isCleanupTabType = (tabId: unknown): tabId is CleanupTabType =>\n  typeof tabId === 'string' &&\n  Object.prototype.hasOwnProperty.call(CLEANUP_TAB_TYPES, tabId);\n\nconst categorizeItemsForTabs = (\n  items: readonly Readonly<ItemInfo>[],\n  cleanupRules: ReadonlyCleanupRuleset\n) =>\n  items.reduce(\n    (itemsForTabs, item) => {\n      const rule = cleanupRules[item.id];\n      if (rule) {\n        itemsForTabs.all.push(item);\n        switch (rule.action) {\n          case 'CLST':\n            itemsForTabs.closet.push(item);\n            break;\n          case 'MAKE':\n            itemsForTabs.craft.push(item);\n            break;\n          case 'AUTO':\n          case 'DISC':\n            itemsForTabs.dispose.push(item);\n            break;\n          case 'BREAK':\n          case 'USE':\n            itemsForTabs.use.push(item);\n            break;\n          case 'DISP':\n            itemsForTabs.display.push(item);\n            break;\n          case 'KEEP':\n            itemsForTabs.keep.push(item);\n            break;\n          case 'GIFT':\n            itemsForTabs.gift.push(item);\n            break;\n          case 'MALL':\n            itemsForTabs.mall.push(item);\n            break;\n          case 'PULV':\n            itemsForTabs.pulverize.push(item);\n            break;\n          case 'TODO':\n            itemsForTabs.reminder.push(item);\n            break;\n          case 'UNTN':\n            itemsForTabs.untinker.push(item);\n            break;\n          case 'CLAN':\n            itemsForTabs.stash.push(item);\n            break;\n        }\n      }\n      return itemsForTabs;\n    },\n    {\n      /** This includes only items that have a cleanup rule defined. */\n      all: [] as ItemInfo[],\n      closet: [] as ItemInfo[],\n      craft: [] as ItemInfo[],\n      display: [] as ItemInfo[],\n      dispose: [] as ItemInfo[],\n      gift: [] as ItemInfo[],\n      keep: [] as ItemInfo[],\n      mall: [] as ItemInfo[],\n      pulverize: [] as ItemInfo[],\n      reminder: [] as ItemInfo[],\n      stash: [] as ItemInfo[],\n      untinker: [] as ItemInfo[],\n      use: [] as ItemInfo[],\n    }\n  );\n\n/** Empty object used as placeholder for the cleanup ruleset being edited. */\nconst EMPTY_CLEANUP_RULES = Object.freeze({});\n\n/**\n * Panel for editing the player's Philter ruleset.\n */\nexport const PanelCategorizedItems = (): JSX.Element => {\n  const {data, error: loadingError, isValidating: isLoading, mutate} = useSWR(\n    CLEANUP_TABLES_CATEGORIZED_ROUTE,\n    async () => {\n      const response = await fetchGetCleanupTableCategorized();\n      // Items must be sorted by ID\n      response.result.items.sort((itemA, itemB) => itemA.id - itemB.id);\n      return response.result;\n    }\n  );\n\n  const [activeCleanupRules, setActiveCleanupRules] = useState<CleanupRuleset>(\n    EMPTY_CLEANUP_RULES\n  );\n\n  useEffect(() => {\n    // When the data is loaded for the first time, populate activeCleanupRules\n    // with the server-sent ruleset\n    if (data?.cleanupRules && activeCleanupRules === EMPTY_CLEANUP_RULES) {\n      setActiveCleanupRules(data.cleanupRules);\n    }\n  }, [activeCleanupRules, data?.cleanupRules]);\n\n  const handleReset = useCallback(\n    () => data?.cleanupRules && setActiveCleanupRules(data.cleanupRules),\n    [data?.cleanupRules]\n  );\n\n  const {\n    error: savingError,\n    execute: handleSave,\n    loading: isSaving,\n  } = useAsyncCallback(() =>\n    mutate(async data => {\n      if (!data) {\n        throw new Error(\"Cannot save ruleset when we don't have any data yet\");\n      }\n      const response = await fetchSaveCleanupRuleset(activeCleanupRules);\n      if (!response?.result?.success) {\n        throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n      }\n      return {...data, cleanupRules: activeCleanupRules};\n    }, false)\n  );\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save cleanup rule'),\n    [savingError]\n  );\n  useEffect(\n    () => setSavingToast('isSaving', isSaving, 'Saving cleanup rules...'),\n    [isSaving]\n  );\n\n  const handleRuleChange: RuleChangeHandler = useCallback(\n    (itemId, newRuleOrReducer) =>\n      setActiveCleanupRules(prevCleanupRules => {\n        const prevRule = prevCleanupRules[itemId] as CleanupRule | undefined;\n        const newRule =\n          typeof newRuleOrReducer === 'function'\n            ? newRuleOrReducer(prevCleanupRules[itemId] || null)\n            : newRuleOrReducer;\n\n        if (prevRule?.action !== newRule?.action) {\n          const itemName = data?.items[itemId]?.name;\n          showInfoToast(\n            newRule\n              ? `Changed action for ${itemName} to \"${cleanupActionToString(\n                  newRule.action\n                )}\"`\n              : `Removed action for ${itemName}`\n          );\n        }\n\n        if (newRule) return {...prevCleanupRules, [itemId]: newRule};\n        else {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {[itemId]: _removed, ...restCleanupRules} = prevCleanupRules;\n          return restCleanupRules;\n        }\n      }),\n    [data?.items]\n  );\n\n  const [tabId, setTabId] = useState<CleanupTabType>('all');\n\n  // Item categories are based on the active copy of the ruleset being edited,\n  // rather than the base copy. This allows the tabs to be updated in real time\n  // when the user edits the ruleset.\n  const itemsForTabs = useMemo(\n    () => categorizeItemsForTabs(data?.items ?? [], activeCleanupRules || {}),\n    [data?.items, activeCleanupRules]\n  );\n\n  const isTabAvailable = Object.prototype.hasOwnProperty.call(\n    itemsForTabs,\n    tabId\n  )\n    ? itemsForTabs[tabId as keyof typeof itemsForTabs].length > 0\n    : true;\n  const actualTabId = isTabAvailable ? tabId : 'all';\n\n  const hasChanges = Boolean(data && data.cleanupRules !== activeCleanupRules);\n\n  const makeItemTable = (items: ItemInfo[]) =>\n    data && (\n      <TableItemCleanup\n        className=\"PanelCategorizedItems__Table\"\n        disableReset={!hasChanges}\n        disableSave={!hasChanges}\n        inventory={data.inventory}\n        items={items}\n        cleanupRules={activeCleanupRules}\n        onRuleChange={handleRuleChange}\n        onReset={handleReset}\n        onSave={handleSave}\n      />\n    );\n\n  return (\n    <>\n      <H3>Edit Cleanup Rules</H3>\n      {data ? (\n        <Tabs\n          className=\"PanelCategorizedItems__Tabs\"\n          onChange={tabId => isCleanupTabType(tabId) && setTabId(tabId)}\n          renderActiveTabPanelOnly\n          selectedTabId={actualTabId}\n        >\n          <Tab\n            id={typeCheck<CleanupTabType>('all')}\n            panel={makeItemTable(itemsForTabs.all)}\n            panelClassName=\"PanelCategorizedItems__TabItem\"\n            title=\"All\"\n          />\n          {itemsForTabs.keep.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('keep')}\n              panel={makeItemTable(itemsForTabs.keep)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Keep\"\n            />\n          )}\n          {itemsForTabs.mall.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('mall')}\n              panel={makeItemTable(itemsForTabs.mall)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Mall\"\n            />\n          )}\n          {itemsForTabs.pulverize.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('pulverize')}\n              panel={makeItemTable(itemsForTabs.pulverize)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Pulverize\"\n            />\n          )}\n          {itemsForTabs.use.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('use')}\n              panel={makeItemTable(itemsForTabs.use)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Use\"\n            />\n          )}\n          {itemsForTabs.closet.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('closet')}\n              panel={makeItemTable(itemsForTabs.closet)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Closet\"\n            />\n          )}\n          {itemsForTabs.stash.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('stash')}\n              panel={makeItemTable(itemsForTabs.stash)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Clan Stash\"\n            />\n          )}\n          {itemsForTabs.craft.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('craft')}\n              panel={makeItemTable(itemsForTabs.craft)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Crafting\"\n            />\n          )}\n          {itemsForTabs.untinker.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('untinker')}\n              panel={makeItemTable(itemsForTabs.untinker)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Untinkering\"\n            />\n          )}\n          {itemsForTabs.gift.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('gift')}\n              panel={makeItemTable(itemsForTabs.gift)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Gift\"\n            />\n          )}\n          {itemsForTabs.display.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('display')}\n              panel={makeItemTable(itemsForTabs.display)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Display\"\n            />\n          )}\n          {itemsForTabs.dispose.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('dispose')}\n              panel={makeItemTable(itemsForTabs.dispose)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Dispose\"\n            />\n          )}\n          {itemsForTabs.reminder.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('reminder')}\n              panel={makeItemTable(itemsForTabs.reminder)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Reminders\"\n            />\n          )}\n        </Tabs>\n      ) : isLoading ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </>\n  );\n};\n","/**\r\n * @file Defines requests and responses for rulesets.\r\n */\r\nexport var RULESET_ROUTE = '/ruleset';\r\n//# sourceMappingURL=ruleset.js.map","import {Code, InputGroup} from '@blueprintjs/core';\nimport React, {memo} from 'react';\nimport './InputGroupAffixedFileName.css';\n\ninterface InputGroupAffixedFileNameProps\n  extends React.ComponentProps<typeof InputGroup> {\n  /** File name prefix, if any */\n  fileNamePrefix?: string;\n  /** File name suffix, if any */\n  fileNameSuffix?: string;\n}\n\n/**\n * `InputGroup` for a file name with predefined prefix and/or suffix.\n */\nexport const InputGroupAffixedFileName = memo(\n  // eslint-disable-next-line prefer-arrow-callback\n  function InputGroupAffixedFileName({\n    fileNamePrefix,\n    fileNameSuffix,\n    className = '',\n    ...restProps\n  }: InputGroupAffixedFileNameProps) {\n    return (\n      <InputGroup\n        className={`InputGroupAffixedFileName ${className}`}\n        leftElement={\n          fileNamePrefix ? (\n            <Code className=\"InputGroupAffixedFileName__Prefix\">\n              {fileNamePrefix}\n            </Code>\n          ) : undefined\n        }\n        rightElement={\n          fileNameSuffix ? (\n            <Code className=\"InputGroupAffixedFileName__Suffix\">\n              {fileNameSuffix}\n            </Code>\n          ) : undefined\n        }\n        {...restProps}\n      />\n    );\n  }\n);\n","import {\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Classes,\n  Code,\n  Dialog,\n  Divider,\n  FormGroup,\n  H3,\n  InputGroup,\n  Radio,\n  RadioGroup,\n} from '@blueprintjs/core';\nimport {CONFIG_ROUTE, PhilterConfig} from '@philter/common';\nimport classNames from 'classnames';\nimport {dequal} from 'dequal/lite';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {fetchGetPhilterConfig, fetchSavePhilterConfig} from '../api';\nimport {setErrorToast, setSavingToast} from '../toaster';\nimport {MAX_MALL_PRICE, ZWSP} from '../util';\nimport {InputGroupAffixedFileName} from './InputGroupAffixedFileName';\nimport './PanelConfig.css';\n\nconst CLEANUP_RULESET_PREFIX = 'OCDdata_';\nconst STOCKING_RULESET_PREFIX = 'OCDstock_';\nconst TXT_SUFFIX = '.txt';\n\ninterface ChangedFileEntry {\n  /** Label for this entry, shown to the user. */\n  label: string;\n  newName: string;\n  oldName: string;\n}\n\n/**\n * A `<Dialog>` that asks whether to copy over existing data or start fresh when\n * the user changes the name of the ruleset file(s).\n * To properly animate closing transitions, this must be rendered even if the\n * dialog is closed.\n */\n// eslint-disable-next-line prefer-arrow-callback\nconst DialogAskCopyOnSave = memo(function DialogAskCopyOnSave({\n  changedFiles = [],\n  isOpen,\n  onCancel,\n  onSaveWithCopy,\n  onSaveWithoutCopy,\n}: {\n  /** Array of data files changed. */\n  changedFiles?: readonly Readonly<ChangedFileEntry>[];\n  isOpen?: boolean;\n  onCancel?: () => void;\n  onSaveWithCopy?: () => void;\n  onSaveWithoutCopy?: () => void;\n}) {\n  return (\n    <Dialog\n      canEscapeKeyClose\n      canOutsideClickClose\n      icon=\"warning-sign\"\n      isOpen={isOpen}\n      onClose={onCancel}\n      title={`Changing data file name${changedFiles.length > 1 ? 's' : ''}`}\n    >\n      <div className={Classes.DIALOG_BODY}>\n        You are about the change your data file\n        {changedFiles.length > 1 ? \"s' names\" : \"'s name\"}:\n        <ul>\n          {changedFiles.map((entry, index) => (\n            <li key={index}>\n              {entry.label}: <Code>{entry.oldName}</Code> &rArr;{' '}\n              <Code>{entry.newName}</Code>\n            </li>\n          ))}\n        </ul>\n        Do you want to copy the contents of your previous data file\n        {changedFiles.length > 1 && 's'}?\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n          <Button\n            icon=\"duplicate\"\n            text=\"Copy contents\"\n            onClick={onSaveWithCopy}\n          />\n          <Button\n            icon=\"exchange\"\n            text={`Change file name${changedFiles.length > 1 ? 's' : ''} only`}\n            onClick={onSaveWithoutCopy}\n          />\n          <Button intent=\"danger\" text=\"Cancel\" onClick={onCancel} />\n        </div>\n      </div>\n    </Dialog>\n  );\n});\n\n/**\n * Helper function that checks if first value is identical to any of the values\n * in the given array.\n */\nconst isOneOf = <T extends unknown>(\n  value: unknown,\n  compareWith: readonly T[]\n): value is T => compareWith.includes(value as T);\n\nexport const PanelConfig = (): JSX.Element => {\n  const {data: baseConfig, error: loadingError, mutate} = useSWR(\n    CONFIG_ROUTE,\n    async () => (await fetchGetPhilterConfig()).result\n  );\n\n  const [config, setConfig] = useState<PhilterConfig | null>(null);\n  // When the data is loaded for the first time, synchronize config with\n  // the server-sent config\n  useEffect(() => {\n    if (baseConfig && !config) {\n      setConfig(baseConfig);\n    }\n  }, [baseConfig, config]);\n\n  // Saving config is a complicated process that can open a popup dialog asking\n  // for the user's confirmation\n  // This is why we jump through loops and hoops...\n\n  const [dialogProps, setDialogProps] = useState<\n    React.ComponentProps<typeof DialogAskCopyOnSave>\n  >({});\n  const closeDialog = useCallback(() => setDialogProps({}), []);\n\n  const {\n    loading: isSaving,\n    execute: saveConfig,\n    error: savingError,\n  } = useAsyncCallback(\n    useCallback(\n      async (shouldCopyDataFiles?: boolean) => {\n        // These are logical errors and should never happen.\n        // If they do, we don't want to catch them\n        if (!config) {\n          throw new Error('Cannot save empty config');\n        }\n        if (!baseConfig) {\n          throw new Error('Cannot overwrite an empty config object');\n        }\n\n        const changedFiles: ChangedFileEntry[] = [];\n        if (config.dataFileName !== baseConfig.dataFileName) {\n          changedFiles.push({\n            label: 'Ruleset file',\n            oldName:\n              CLEANUP_RULESET_PREFIX + baseConfig.dataFileName + TXT_SUFFIX,\n            newName: CLEANUP_RULESET_PREFIX + config.dataFileName + TXT_SUFFIX,\n          });\n        }\n        if (config.stockFileName !== baseConfig.stockFileName) {\n          changedFiles.push({\n            label: 'Stock file',\n            oldName:\n              STOCKING_RULESET_PREFIX + baseConfig.stockFileName + TXT_SUFFIX,\n            newName:\n              STOCKING_RULESET_PREFIX + config.stockFileName + TXT_SUFFIX,\n          });\n        }\n\n        // If shouldCopyDataFiles is not explicitly given, display a dialog asking\n        // the user what to do\n        if (changedFiles.length && shouldCopyDataFiles === undefined) {\n          setDialogProps({isOpen: true, changedFiles});\n          return;\n        }\n\n        const response = await fetchSavePhilterConfig(\n          config,\n          shouldCopyDataFiles\n        );\n        if (!response?.result?.success) {\n          throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n        }\n        mutate(config);\n      },\n      [baseConfig, config, mutate]\n    )\n  );\n\n  const hasChanges = !dequal(config, baseConfig);\n  const setConfigSafe = useCallback(\n    (configOrReducer: React.SetStateAction<PhilterConfig>) =>\n      setConfig(\n        typeof configOrReducer === 'function'\n          ? config => config && configOrReducer(config)\n          : configOrReducer\n      ),\n    []\n  );\n\n  const isDisabled = !baseConfig || !config || isSaving;\n\n  useEffect(\n    () => setErrorToast('loadingError', loadingError, 'Cannot load config'),\n    [loadingError]\n  );\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save config'),\n    [savingError]\n  );\n  useEffect(() => setSavingToast('isSaving', isSaving, 'Saving config...'), [\n    isSaving,\n  ]);\n\n  const isMallMultiInputDisabled = isDisabled || !config?.canUseMallMulti;\n  return (\n    <>\n      <DialogAskCopyOnSave\n        onCancel={() => closeDialog()}\n        onSaveWithCopy={() => {\n          closeDialog();\n          saveConfig(true);\n        }}\n        onSaveWithoutCopy={() => {\n          closeDialog();\n          saveConfig(false);\n        }}\n        {...dialogProps}\n      />\n      <H3>Configure Philter</H3>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">General settings</legend>\n\n        <RadioGroup\n          disabled={isDisabled}\n          inline\n          label=\"Empty closet first before cleanup:\"\n          onChange={useCallback(\n            ({currentTarget: {value}}) => {\n              const emptyClosetMode = Number(value);\n              if (isOneOf(emptyClosetMode, [0, -1] as const)) {\n                setConfigSafe(config => ({...config, emptyClosetMode}));\n              }\n            },\n            [setConfigSafe]\n          )}\n          selectedValue={config?.emptyClosetMode}\n        >\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Never\"\n            value={0}\n          />\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Before Emptying Hangk's (recommended)\"\n            value={-1}\n          />\n        </RadioGroup>\n\n        <Divider className=\"PanelConfig__Divider\" />\n\n        <RadioGroup\n          disabled={isDisabled}\n          inline\n          label=\"Mall pricing: \"\n          onChange={useCallback(\n            ({currentTarget: {value}}) => {\n              if (isOneOf(value, ['auto', 'max'] as const)) {\n                setConfigSafe(config => ({...config, mallPricingMode: value}));\n              }\n            },\n            [setConfigSafe]\n          )}\n          selectedValue={config?.mallPricingMode}\n        >\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Automatic\"\n            value=\"auto\"\n          />\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label={`${MAX_MALL_PRICE.toLocaleString()} meat (ignores \"min price\")`}\n            value=\"max\"\n          />\n        </RadioGroup>\n\n        <Divider className=\"PanelConfig__Divider\" />\n\n        <Checkbox\n          checked={Boolean(config?.simulateOnly)}\n          className={!config ? Classes.SKELETON : undefined}\n          disabled={isDisabled}\n          onChange={({currentTarget: {checked}}) =>\n            setConfigSafe(config => ({...config, simulateOnly: checked}))\n          }\n        >\n          Simulate only <small>(no items will be cleaned up)</small>\n        </Checkbox>\n      </fieldset>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">Mall multi setup</legend>\n        <Checkbox\n          checked={Boolean(config?.canUseMallMulti)}\n          className={!config ? Classes.SKELETON : undefined}\n          disabled={isDisabled}\n          onChange={({currentTarget: {checked}}) =>\n            setConfigSafe(config => ({...config, canUseMallMulti: checked}))\n          }\n        >\n          Use mall multi\n        </Checkbox>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isMallMultiInputDisabled}\n          inline\n          intent={\n            !isMallMultiInputDisabled && !config?.mallMultiName\n              ? 'warning'\n              : undefined\n          }\n          label=\"Mall multi name:\"\n          helperText={\n            !isMallMultiInputDisabled && !config?.mallMultiName\n              ? 'No multi account'\n              : ZWSP\n          }\n        >\n          <InputGroup\n            className={!config ? Classes.SKELETON : undefined}\n            disabled={isMallMultiInputDisabled}\n            onChange={({target: {value}}) =>\n              setConfigSafe(config => ({...config, mallMultiName: value}))\n            }\n            placeholder={isMallMultiInputDisabled ? '' : 'Enter player name'}\n            value={config?.mallMultiName || ''}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled || !config?.canUseMallMulti}\n          inline\n          label=\"Mall multi Kmail text:\"\n        >\n          <InputGroup\n            className={!config ? Classes.SKELETON : undefined}\n            disabled={isDisabled || !config?.canUseMallMulti}\n            onChange={({target: {value}}) =>\n              setConfigSafe(config => ({\n                ...config,\n                mallMultiKmailMessage: value,\n              }))\n            }\n            placeholder={isMallMultiInputDisabled ? '' : 'Enter Kmail message'}\n            value={config?.mallMultiKmailMessage || ''}\n          />\n        </FormGroup>\n      </fieldset>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">Data files</legend>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled}\n          inline\n          label=\"Ruleset file:\"\n        >\n          <InputGroupAffixedFileName\n            className={classNames(\n              'PanelConfig_InputFileName',\n              !config && Classes.SKELETON\n            )}\n            disabled={isDisabled}\n            fileNamePrefix={CLEANUP_RULESET_PREFIX}\n            fileNameSuffix={TXT_SUFFIX}\n            onChange={useCallback(\n              ({target: {value}}) =>\n                setConfigSafe(config => ({...config, dataFileName: value})),\n              [setConfigSafe]\n            )}\n            value={config?.dataFileName || ''}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled}\n          inline\n          label=\"Stock file:\"\n        >\n          <InputGroupAffixedFileName\n            className={classNames(\n              'PanelConfig_InputFileName',\n              !config && Classes.SKELETON\n            )}\n            disabled={isDisabled}\n            fileNamePrefix={STOCKING_RULESET_PREFIX}\n            fileNameSuffix={TXT_SUFFIX}\n            onChange={useCallback(\n              ({target: {value}}) =>\n                setConfigSafe(config => ({...config, stockFileName: value})),\n              [setConfigSafe]\n            )}\n            value={config?.stockFileName || ''}\n          />\n        </FormGroup>\n      </fieldset>\n\n      <ButtonGroup>\n        <Button\n          disabled={isDisabled || !hasChanges}\n          icon=\"floppy-disk\"\n          onClick={useCallback(() => saveConfig(), [saveConfig])}\n          text=\"Save\"\n        />\n        <Button\n          disabled={isDisabled || !hasChanges}\n          icon=\"reset\"\n          onClick={useCallback(() => baseConfig && setConfig(baseConfig), [\n            baseConfig,\n          ])}\n          text=\"Discard changes\"\n        />\n      </ButtonGroup>\n    </>\n  );\n};\n","/**\r\n * @file Defines requests and responses for Philter settings.\r\n */\r\nexport var CONFIG_ROUTE = '/config';\r\n//# sourceMappingURL=config.js.map","import {\n  Callout,\n  Colors,\n  H3,\n  HTMLTable,\n  NonIdealState,\n  Spinner,\n} from '@blueprintjs/core';\nimport {STATISTICS_ROUTE} from '@philter/common';\nimport React, {useMemo} from 'react';\nimport useSWR from 'swr';\nimport {fetchGetStatistics} from '../api';\nimport './PanelInformation.css';\n\nconst BULLET = <span className=\"PanelInformation__Bullet\">&#8943;</span>;\n\n/**\n * Panel that acts as the \"home page\", and displays general information about\n * the player's cleanup rules.\n */\nexport const PanelInformation = (): JSX.Element => {\n  const {data, isValidating: isLoading, error: loadingError} = useSWR(\n    STATISTICS_ROUTE,\n    async () => (await fetchGetStatistics()).result\n  );\n\n  const categorizedCount = useMemo(\n    () =>\n      data\n        ? Object.values(data.categorizedItemCounts).reduce(\n            (acc, sum) => acc + sum\n          )\n        : 0,\n    [data]\n  );\n\n  return (\n    <div>\n      <H3>\n        <a\n          href=\"https://github.com/Loathing-Associates-Scripting-Society/Philter\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Philter Manager\n        </a>\n      </H3>\n      <p>\n        Brought to you by{' '}\n        <a\n          href=\"https://github.com/Loathing-Associates-Scripting-Society\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Loathing Associates Scripting Society\n        </a>\n      </p>\n      <Callout intent=\"warning\" title=\"Manager v2 is in alpha\">\n        Using this <i>may</i> destroy your Philter configuration. Use at your\n        own risk.\n        <br />\n        The{' '}\n        <a href=\"/relay_Philter_Manager_classic.ash?relay=true\">\n          classic UI\n        </a>{' '}\n        is still available.\n      </Callout>\n      {data ? (\n        categorizedCount > 0 ? (\n          <HTMLTable\n            bordered\n            className=\"PanelInformation__VerticalTable\"\n            condensed\n          >\n            <tr>\n              <th\n                style={\n                  data.uncategorizedItemCount > 0\n                    ? {color: Colors.ORANGE1}\n                    : undefined\n                }\n              >\n                Uncategorized (in inventory)\n              </th>\n              <td\n                style={\n                  data.uncategorizedItemCount > 0\n                    ? {color: Colors.ORANGE1}\n                    : undefined\n                }\n              >\n                {data.uncategorizedItemCount}\n              </td>\n            </tr>\n            <tr>\n              <th>Items in Ruleset</th>\n              <td>{categorizedCount}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Keep All</th>\n              <td>{data.categorizedItemCounts.KEEP}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Mallsell</th>\n              <td>{data.categorizedItemCounts.MALL}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Autosell/Discard</th>\n              <td>\n                {data.categorizedItemCounts.AUTO +\n                  data.categorizedItemCounts.DISC}\n              </td>\n            </tr>\n            <tr>\n              <th>{BULLET} Pulverize</th>\n              <td>{data.categorizedItemCounts.PULV}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Use or break</th>\n              <td>\n                {data.categorizedItemCounts.BREAK +\n                  data.categorizedItemCounts.USE}\n              </td>\n            </tr>\n            <tr>\n              <th>{BULLET} Put in closet</th>\n              <td>{data.categorizedItemCounts.CLST}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Put in clan stash</th>\n              <td>{data.categorizedItemCounts.CLAN}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Crafting</th>\n              <td>{data.categorizedItemCounts.MAKE}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Untinker</th>\n              <td>{data.categorizedItemCounts.UNTN}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Send as gift</th>\n              <td>{data.categorizedItemCounts.GIFT}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Put in display case</th>\n              <td>{data.categorizedItemCounts.DISP}</td>\n            </tr>\n            <tr>\n              <th>{BULLET} Remind me later</th>\n              <td>{data.categorizedItemCounts.TODO}</td>\n            </tr>\n          </HTMLTable>\n        ) : (\n          <NonIdealState\n            icon=\"help\"\n            description='If this is your first time using Philter, you can create cleanup rules for your items in the \"Add Items\" tab.'\n            title=\"Your Philter ruleset is empty or missing.\"\n          />\n        )\n      ) : isLoading ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </div>\n  );\n};\n","/**\r\n * @file Endpoint for general statistics about Philter.\r\n */\r\nexport var STATISTICS_ROUTE = '/statistics';\r\n//# sourceMappingURL=statistics.js.map","import {\n  Button,\n  ButtonGroup,\n  FormGroup,\n  H3,\n  NonIdealState,\n  Spinner,\n} from '@blueprintjs/core';\nimport {\n  CLEANUP_TABLES_UNCATEGORIZED_ROUTE,\n  CleanupRuleset,\n} from '@philter/common';\nimport {dequal} from 'dequal/lite';\nimport React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {\n  fetchGetCleanupTableUncategorized,\n  fetchPatchCleanupRuleset,\n} from '../api';\nimport {setErrorToast, setSavingToast} from '../toaster';\nimport {TableItemCleanup} from './TableItemCleanup';\nimport './PanelUncategorizedItems.css';\n\nconst EMPTY_CLEANUP_RULES = {};\n\nexport const PanelUncategorizedItems = (): JSX.Element => {\n  // Major assumptions:\n  //\n  // - data.items contains _only_ items that are uncategorized, i.e. the server\n  //   performs the filtering for us.\n  // - cleanupRules always starts as an empty ruleset. Since data.items has\n  //   already been curated, there is no need to retrieve the entire ruleset\n  //   from the server.\n  const {\n    data,\n    error: loadingError,\n    isValidating: isLoadingData,\n    mutate,\n  } = useSWR(CLEANUP_TABLES_UNCATEGORIZED_ROUTE, async () => {\n    const response = await fetchGetCleanupTableUncategorized();\n    // Items must be sorted by ID\n    response.result.items.sort((itemA, itemB) => itemA.id - itemB.id);\n    return response.result;\n  });\n\n  const [cleanupRules, setCleanupRules] = useState<CleanupRuleset>(\n    EMPTY_CLEANUP_RULES\n  );\n  const resetCleanupRules = useCallback(\n    () => setCleanupRules(EMPTY_CLEANUP_RULES),\n    []\n  );\n\n  const hasChanges = useMemo(() => !dequal(cleanupRules, EMPTY_CLEANUP_RULES), [\n    cleanupRules,\n  ]);\n\n  const {\n    error: savingError,\n    execute: doSave,\n    loading: isSaving,\n  } = useAsyncCallback(async () => {\n    const response = await fetchPatchCleanupRuleset(cleanupRules);\n    if (!response?.result?.success) {\n      throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n    }\n    mutate();\n    resetCleanupRules();\n  });\n\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save cleanup rule'),\n    [savingError]\n  );\n  useEffect(\n    () => setSavingToast('isSaving', isSaving, 'Saving cleanup rules...'),\n    [isSaving]\n  );\n\n  const setAllItemsToMall = useCallback(\n    () =>\n      data &&\n      setCleanupRules(({...cleanupRules}) => {\n        for (const item of data.items) {\n          if (item.canMall) {\n            cleanupRules[item.id] = {action: 'MALL', minPrice: 0};\n          }\n        }\n        return cleanupRules;\n      }),\n    [data]\n  );\n  const setAllItemsToCloset = useCallback(\n    () =>\n      data &&\n      setCleanupRules(({...cleanupRules}) => {\n        for (const item of data.items) {\n          if (item.canCloset) {\n            cleanupRules[item.id] = {action: 'CLST'};\n          }\n        }\n        return cleanupRules;\n      }),\n    [data]\n  );\n  const setAllItemsToKeep = useCallback(\n    () =>\n      data &&\n      setCleanupRules(({...cleanupRules}) => {\n        for (const item of data.items) {\n          cleanupRules[item.id] = {action: 'KEEP'};\n        }\n        return cleanupRules;\n      }),\n    [data]\n  );\n\n  return (\n    <>\n      <H3>Uncategorized Items in Your Inventory</H3>\n      {data ? (\n        data.items.length > 0 ? (\n          <>\n            <FormGroup inline label=\"Categorize all items as...\">\n              <ButtonGroup>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item =>\n                        item.canMall && cleanupRules[item.id]?.action !== 'MALL'\n                    )\n                  }\n                  onClick={setAllItemsToMall}\n                >\n                  Mallsell\n                </Button>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item =>\n                        item.canCloset &&\n                        cleanupRules[item.id]?.action !== 'CLST'\n                    )\n                  }\n                  onClick={setAllItemsToCloset}\n                >\n                  Closet\n                </Button>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item => cleanupRules[item.id]?.action !== 'KEEP'\n                    )\n                  }\n                  onClick={setAllItemsToKeep}\n                >\n                  Keep all\n                </Button>\n              </ButtonGroup>\n            </FormGroup>\n            <TableItemCleanup\n              className=\"PanelUncategorizedItems__Table\"\n              disableReset={!hasChanges}\n              disableSave={!hasChanges}\n              inventory={data.inventory}\n              items={data.items}\n              cleanupRules={cleanupRules}\n              onChange={setCleanupRules}\n              onReset={resetCleanupRules}\n              onSave={doSave}\n            />\n          </>\n        ) : (\n          <NonIdealState\n            icon={\n              <img\n                alt=\"Nothing to do\"\n                src=\"/images/adventureimages/kg_accountant.gif\"\n              />\n            }\n            title=\"Your entire inventory has been categorized\"\n            description='\"Nothing to see here, please move along.\"'\n          />\n        )\n      ) : isLoadingData ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </>\n  );\n};\n","import {Tab, Tabs} from '@blueprintjs/core';\nimport React, {useState} from 'react';\nimport './App.css';\nimport {PanelCategorizedItems} from './components/PanelCategorizedItems';\nimport {PanelConfig} from './components/PanelConfig';\nimport {PanelInformation} from './components/PanelInformation';\nimport {PanelUncategorizedItems} from './components/PanelUncategorizedItems';\nimport {typeCheck} from './util';\n\nconst MainTabs = Object.freeze({\n  categorized: 0,\n  config: 0,\n  information: 0,\n  uncategorized: 0,\n});\ntype MainTabType = keyof typeof MainTabs;\nconst DEFAULT_TAB = 'information';\n\n/**\n * Ensures that the given tab ID is a valid tab ID.\n * @param tabId Tab ID to check\n * @return Returns the original value of `tabId` if it is a valid tab ID.\n *    Otherwise, returns an appropriate default tab ID as fallback.\n */\nconst ensureValidTabType = (tabId: number | string): MainTabType =>\n  Object.prototype.hasOwnProperty.call(MainTabs, tabId)\n    ? (tabId as MainTabType)\n    : DEFAULT_TAB;\n\nexport const App = (): JSX.Element => {\n  const [tabId, setTabId] = useState<MainTabType>(DEFAULT_TAB);\n\n  return (\n    <div className=\"App\">\n      <Tabs\n        className=\"App__Tabs\"\n        id=\"mainTabs\"\n        onChange={tabId => setTabId(ensureValidTabType(tabId))}\n        renderActiveTabPanelOnly\n        selectedTabId={ensureValidTabType(tabId)}\n      >\n        <Tab\n          id={typeCheck<MainTabType>('information')}\n          panel={<PanelInformation />}\n          panelClassName=\"App__TabItem\"\n          title=\"Information\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('uncategorized')}\n          panel={<PanelUncategorizedItems />}\n          panelClassName=\"App__TabItem\"\n          title=\"Add Items\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('categorized')}\n          panel={<PanelCategorizedItems />}\n          panelClassName=\"App__TabItem\"\n          title=\"Edit Rules\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('config')}\n          panel={<PanelConfig />}\n          panelClassName=\"App__TabItem\"\n          title=\"Configuration\"\n        />\n      </Tabs>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"names":["_cleanupActions","Object","freeze","AUTO","BREAK","CLAN","CLST","DISC","DISP","GIFT","KEEP","MAKE","MALL","PULV","TODO","UNTN","USE","Error","[object Object]","message","code","response","ApiError","prototype","name","fetchFromApi","async","path","method","body","preparedRequest","request","value","serializedRequest","_i","_a","keys","length","key","serializedValue","JSON","stringify","prepareRequestForSerialization","__spreadValues","fetchResponse","fetch","URLSearchParams","ok","text","e","error","statusText","status","json","toaster","Toaster","create","maxToasts","setErrorToast","errorMessage","show","icon","intent","String","dismiss","setSavingToast","isSaving","shouldWarnOnPulverize","item","isTradable","isCleanupActionOrUnknown","hasOwnProperty","call","isCleanupAction","SelectCleanupAction","memo","className","onChange","_b","restProps","HTMLSelect","classNames","target","canMall","canBreak","canAutosell","canDiscard","style","color","Colors","ORANGE2","canGift","canStash","canPulverize","canMake","canUntinker","canUse","canCloset","canDisplay","CleanupRulePicker","rule","handleActionChange","useCallback","action","oldRule","__spreadProps","recipent","shouldUseCreatableOnly","targetItem","minPrice","helperText","Intent","WARNING","FormGroup","contentClassName","inline","DANGER","label","InputGroup","placeholder","small","Checkbox","checked","currentTarget","NumericInput","majorStepSize","max","min","minorStepSize","onValueChange","Number","isInteger","Math","stepSize","TableItemCleanupRow","_c","inventory","onRuleChange","_d","AnchorButton","minimal","onClick","itemDescriptionPopup","descid","open","focus","title","useMemo","alt","src","image","href","rel","dangerouslySetInnerHTML","__html","id","closet","storage","displayCase","mallPrice","toLocaleString","replace","isMallPriceAtMinimum","Tag","htmlTitle","disabled","fill","rule2","keepAmount","newRuleOrReducer","areEqual","TableItemCleanup","_e","cleanupRules","disableReset","disableSave","items","onReset","onSave","_f","defaultRuleChangeHandler","itemId","newRule","prevCleanupRules","_removed","__restKey","scrollTimerRef","useRef","isScrollingRef","doScroll","type","amount","current","window","requestAnimationFrame","behavior","top","cancelAnimationFrame","innerListRef","outerListRef","itemData","itemKeyCallback","index2","data","editorButtons","ButtonGroup","Button","Popover2","popoverClassName","Popover2Classes.POPOVER2_CONTENT_SIZING","content","UL","TableItemCleanupRowWrapper","index","isScrolling","inventory2","items2","onRuleChange2","cleanupRules2","AutoSizer","disableWidth","height","measuredHeight","onKeyDown","event","ROW_HEIGHT","parseFloat","tabIndex","FixedSizeList","innerRef","itemCount","itemKey","itemSize","outerRef","overscanCount","useIsScrolling","width","CLEANUP_TAB_TYPES","all","craft","display","dispose","gift","keep","mall","pulverize","reminder","search","stash","untinker","use","EMPTY_CLEANUP_RULES","PanelCategorizedItems","loadingError","isValidating","isLoading","mutate","useSWR","result","sort","itemA","itemB","activeCleanupRules","setActiveCleanupRules","useState","handleReset","savingError","execute","handleSave","loading","useAsyncCallback","data2","success","handleRuleChange","prevRule","itemName","cleanupActionToString","tabId","setTabId","itemsForTabs","reduce","push","actualTabId","hasChanges","Boolean","makeItemTable","H3","Tabs","isCleanupTabType","tabId2","renderActiveTabPanelOnly","selectedTabId","Tab","panel","panelClassName","Spinner","NonIdealState","description","InputGroupAffixedFileName","_g","fileNamePrefix","fileNameSuffix","_h","leftElement","Code","rightElement","DialogAskCopyOnSave","changedFiles","isOpen","onCancel","onSaveWithCopy","onSaveWithoutCopy","Dialog","canEscapeKeyClose","canOutsideClickClose","onClose","Classes.DIALOG_BODY","map","entry","oldName","newName","Classes.DIALOG_FOOTER","Classes.DIALOG_FOOTER_ACTIONS","isOneOf","compareWith","includes","PanelConfig","baseConfig","config","setConfig","dialogProps","setDialogProps","closeDialog","saveConfig","shouldCopyDataFiles","dataFileName","stockFileName","fetchSavePhilterConfig","dequal","setConfigSafe","configOrReducer","config2","isDisabled","isMallMultiInputDisabled","canUseMallMulti","RadioGroup","emptyClosetMode","selectedValue","Radio","Classes.SKELETON","Divider","mallPricingMode","simulateOnly","mallMultiName","mallMultiKmailMessage","BULLET","PanelInformation","categorizedCount","values","categorizedItemCounts","acc","sum","Callout","HTMLTable","bordered","condensed","uncategorizedItemCount","ORANGE1","PanelUncategorizedItems","isLoadingData","setCleanupRules","resetCleanupRules","doSave","cleanupRulesPatch","setAllItemsToMall","setAllItemsToCloset","setAllItemsToKeep","some","MainTabs","categorized","information","uncategorized","ensureValidTabType","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"25BAGO,ICEHA,EAAkBC,OAAOC,OAAO,CAChCC,KAAM,EACNC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,IAAK,oBCSqBC,MAM5BC,YAAYC,EAAiBC,EAAcC,SACnCF,QACDC,KAAOA,OACPC,SAAWA,GAGpBC,EAASC,UAAUC,KAAO,WAS1B,MAAMC,GAAeC,MAInBC,EACAC,EACAC,WAEMC,EC1CD,SAAwCC,WATZC,EAU3BC,EAAoB,GACfC,EAAK,EAAGC,EAAKlC,OAAOmC,KAAKL,GAAUG,EAAKC,EAAGE,OAAQH,IAAM,KAC1DI,EAAMH,EAAGD,MAXA,YADcF,EAcGM,IAbK,SAAVN,IAcHM,GAAOP,EAAQO,OAEhC,KAIGC,EAAkBC,KAAKC,UAAUV,EAAQO,SAErB,IAApBC,MACkBD,GAAOC,WAI9BN,EDuBeS,CAA+BC,GACrDhB,KAAAA,EACAC,OAAAA,GACGC,IAKCe,QAAsBC,MAAM,uCAAoC,CACpEhB,KAAM,IAAIiB,gBAAgBhB,GAC1BF,OAAQ,aAELgB,EAAcG,GAAI,KACjBC,cAEWJ,EAAcI,aACpBC,WAECC,MAAMD,SAEV,IAAI3B,EAASsB,EAAcO,WAAYP,EAAcQ,OAAQJ,OAGjE3B,cAEgBuB,EAAcS,aAGzBH,SACD,IAAI5B,EACR,sCAAsC4B,iBAAqB7B,IAC3D,IACAA,MAIA,UAAWA,QACP,IAAIC,EACRD,EAAS6B,MAAM/B,QACfE,EAAS6B,MAAM9B,KACfC,EAAS6B,MAAM/B,gBAGZE,GE3FIiC,GAAUC,EAAQC,OAAO,CAACC,UAAW,IASrCC,GAAgB,CAC3BpB,EACAY,EACAS,KAEIT,KACMU,KACN,CACEC,KAAM,eACNC,OAAQ,UACR3C,QACE+B,aAAiB5B,kCAEZqC,EAAa,KAAGT,EAAM/B,wBACtB,KAAD,MAAM,aACK4C,OAAOb,EAAM7B,WAG1B,GAAGsC,MAAiBT,KAG1BZ,MAGM0B,QAAQ1B,IAkBP2B,GAAiB,CAC5B3B,EACA4B,EACA/C,KAEI+C,KACMN,KAAK,CAACC,KAAM,cAAeC,OAAQ,UAAW3C,QAAAA,GAAUmB,MAExD0B,QAAQ1B,ICNP6B,GAAyBC,IACnCA,EAAKC,iBChDFC,GACJtC,GANoC,SAQpCA,GLM2B,SAAUA,SACX,iBAAVA,GACV/B,OAAOsB,UAAUgD,eAAeC,KAAKxE,EAAiBgC,GKRxByC,CAAgBzC,GAmBzC0C,GAAsBC,gBAAK,SAA6BxC,YACnEyC,iBACAR,WACAS,QACA7C,GAJmE8C,EAKhEC,IALgED,EAKhE,CAJH,YACA,OACA,WACA,iCAIGE,EAADrC,GACEiC,UAAWK,EAAW,sBAAuBL,GAC7CC,YACEP,GAAyBrB,EAAEiC,OAAOlD,QAAU6C,EAAS5B,EAAEiC,OAAOlD,OAEhEA,MAAAA,GACI+C,mBAEH,SAAD,CAAQ/C,MA3CwB,QA2C0C,mCAGzE,SAAD,CAAQA,MAAyC,QAAS,YAGzDoC,EAAKe,yBACH,SAAD,CAAQnD,MAAyC,QAAS,aAI3DoC,EAAKgB,0BACH,SAAD,CAAQpD,MAAyC,SAAU,eAI5DoC,EAAKiB,6BACH,SAAD,CAAQrD,MAAyC,QAAS,YAI3DoC,EAAKkB,4BACH,SAAD,CACEC,MAAO,CAACC,MAAOC,EAAOC,SACtB1D,MAAyC,QAC1C,WAIFoC,EAAKuB,yBACH,SAAD,CAAQ3D,MAAyC,QAAS,gBAI3DoC,EAAKwB,0BACH,SAAD,CAAQ5D,MAAyC,QAAS,qBAI3DoC,EAAKyB,8BACH,SAAD,CACEN,MACEpB,GAAsBC,GAAQ,CAACoB,MAAOC,EAAOC,cAAW,EAE1D1D,MAAyC,QAC1C,aAIFoC,EAAK0B,yBACH,SAAD,CAAQ9D,MAAyC,QAAS,YAI3DoC,EAAK2B,6BACH,SAAD,CAAQ/D,MAAyC,QAAS,YAI3DoC,EAAK4B,wBACH,SAAD,CAAQhE,MAAyC,OAAQ,OAE1DoC,EAAK6B,2BACH,SAAD,CAAQjE,MAAyC,QAAS,UAI3DoC,EAAK8B,4BACH,SAAD,CAAQlE,MAAyC,QAAS,2BAI3D,SAAD,CAAQA,MAAyC,QAAS,gBC1GnDmE,GAAoB,EAC/B/B,KAAAA,EACAgC,KAAAA,EACAvB,SAAAA,YAcMwB,EAAqBC,uBACxBC,IACM1B,SAEC0B,sBAAoBA,QAAeC,ED9BT,SCsC1BD,EACK,KAEAE,OAAID,GADS,SAAXD,EACF,CAAaA,OAAAA,EAAQpF,QAAS,GAAIuF,SAAU,IAC/B,SAAXH,EACF,CAELA,OAAAA,EACAI,wBAAwB,EACxBC,WAAY,IAEM,SAAXL,EACF,CAAaA,OAAAA,EAAQM,SAAU,GAClB,SAAXN,EACF,CAAaA,OAAAA,EAAQpF,QAAS,IAE9B,CAAaoF,OAAAA,QAI1B,CAAC1B,QAGCiC,EACAhD,SAEAsC,IACkB,SAAhBA,EAAKG,QAAqBpC,GAAsBC,MACrC,2CACJ2C,EAAOC,SACS,SAAhBZ,EAAKG,WACD,2CACJQ,EAAOC,0BAKjBC,EAAD,CACErC,UAAU,oBACVkC,WAAAA,EACAhD,OAAAA,mBAMC,MAAD,CAAKc,UAAU,6CACZF,GAAD,CACEE,UAAU,2BACVR,KAAAA,EACAS,SAAUwB,EACVrE,MAAOoE,EAAOA,EAAKG,ODzFS,SC4F5BH,EAA8B,SAAhBA,EAAKG,uDAEhBU,EAAD,CACErC,UAAU,2BACVsC,iBAAiB,uCACjBJ,YAAaV,EAAKM,UAAY,mBAC9BS,QAAM,EACNrD,OAAQsC,EAAKM,cAAW,EAAYK,EAAOK,OAC3CC,MAAM,sBAELC,EAAD,CACE1C,UAAU,+BACVd,OAAQsC,EAAKM,cAAW,EAAYK,EAAOK,OAC3CvC,kBAAeA,WAAW4B,OAAIL,GAAJ,CAAUM,SAAUzD,EAAEiC,OAAOlD,SACvDuF,YAAY,cACZC,OAAK,EACLxF,MAAOoE,EAAKM,4BAGfO,EAAD,CACErC,UAAU,2BACVsC,iBAAiB,sCACjBC,QAAM,EACNE,MAAM,wBAELC,EAAD,CACE1C,UAAU,+BACVC,kBAAeA,WAAW4B,OAAIL,GAAJ,CAAUjF,QAAS8B,EAAEiC,OAAOlD,SACtDuF,YAAY,gBACZC,OAAK,EACLxF,MAAOoE,EAAKjF,YAIA,SAAhBiF,EAAKG,uDAEJU,EAAD,CACErC,UAAU,2BACVsC,iBAAiB,qCACjBJ,YAAaV,EAAKQ,YAAc,eAChCO,QAAM,EACNrD,OAASsC,EAAKQ,gBAA6B,EAAhBG,EAAOK,OAClCC,MAAM,wBAELC,EAAD,CACE1C,UAAU,+BACVd,OAASsC,EAAKQ,gBAA6B,EAAhBG,EAAOK,OAClCvC,kBACEA,WAAW4B,OAAIL,GAAJ,CAAUQ,WAAY3D,EAAEiC,OAAOlD,SAE5CuF,YAAY,YACZC,OAAK,EACLxF,MAAOoE,EAAKQ,8BAGfa,EAAD,CACEC,QAAStB,EAAKO,uBACd/B,UAAU,uDACVC,kBACEA,WAAW4B,OACNL,GADM,CAETO,uBAAwB1D,EAAE0E,cAAcD,4BAI3C,OAAD,CAAM9C,UAAU,mCAAkC,oCAKpC,SAAhBwB,EAAKG,uBACNU,EAAD,CACErC,UAAU,2BACVsC,iBAAiB,uCACjBC,QAAM,EACNE,MAAM,6BAELO,EAAD,CACEC,cAAe,IACfC,IF3KgB,UE4KhBC,IAAK,EACLC,cAAe,KACfC,kBACMC,OAAOC,UAAUnG,gBACRyE,OACNL,GADM,CAETS,SAAUuB,KAAKN,IAAI,EAAGM,KAAKL,IFlLjB,UEkLqC/F,SAIrDqG,SAAU,EACVrG,MAAOoE,EAAKS,YAGE,SAAhBT,EAAKG,uBACNU,EAAD,CACErC,UAAU,2BACVsC,iBAAiB,sCACjBC,QAAM,EACNE,MAAM,iCAELC,EAAD,CACE1C,UAAU,+BACVC,kBAAeA,WAAW4B,OAAIL,GAAJ,CAAUjF,QAAS8B,EAAEiC,OAAOlD,SACtDuF,YAAY,yBACZC,OAAK,EACLxF,MAAOoE,EAAKjF,WAGd,KA7GK,QC5CXmH,GAAsB3D,gBAAK,SAA6B4D,YAC5D3D,sBACA4D,OACApE,eACAqE,OACArC,GAL4DsC,EAMzD3D,IANyD2D,EAMzD,CALH,YACA,YACA,OACA,eACA,gCAIG,MAAD/F,GAAKiC,UAAW,yBAAyBA,GAAa,MAAUG,mBAC7D,MAAD,CAAKH,UAAU,2EACZ+D,EAAD,CACE/D,UAAU,kCACVgE,SAAO,EACPC,QAASvC,uBAAY,KAAMwC,OApCPC,EAoC4B3E,EAAK2E,4BAlC1DC,KAAK,4BAA4BD,IAAU,OAAQ,4BAClDE,SAHuB,IAACF,MAoC0C,CAC5D3E,EAAK2E,SAEPG,MAAM,yBAELC,mBACC,oBACG,MAAD,CACEvE,UAAU,8BACVwE,IAAKhF,EAAK5C,KACV6H,IAAK,sBAAsBjF,EAAKkF,WAGpC,CAAClF,qBAGJuE,EAAD,CACE/D,UAAU,iCACV2E,KAAM,wEAAwEnF,EAAK5C,aACnFoH,SAAO,EACPY,IAAI,sBACJtE,OAAO,SACPgE,MAAM,uBAELC,mBACC,oDAEK,OAAD,CAAMM,wBAAyB,CAACC,OAAQtF,EAAK5C,QAC5CgH,EAAUA,UAAUpE,EAAKuF,IAAM,mCAE3B,oBACA,IAAD,KAAG,IAAEnB,EAAUA,UAAUpE,EAAKuF,IAAI,QAK1C,CAACnB,EAAWpE,sBAIjB,MAAD,CAAKQ,UAAU,+DACZ4D,EAAUoB,OAAOxF,EAAKuF,KAAO,mBAE/B,MAAD,CAAK/E,UAAU,gEACZ4D,EAAUqB,QAAQzF,EAAKuF,KAAO,mBAEhC,MAAD,CAAK/E,UAAU,oEACZ4D,EAAUsB,YAAY1F,EAAKuF,KAAO,mBAEpC,MAAD,CAAK/E,UAAU,4DACZR,EAAK2F,WAA+B3F,EAAK2F,UAAUC,iBA5FbC,QAAQ,KAAM,MA6FjC,OAAnB7F,EAAK2F,WAAsB3F,EAAK8F,sCAC9BC,EAAD,CACEvF,UAAU,6CACVwF,UAAU,2BACVtG,OAAO,UACP8E,SAAO,GACR,wBAKJ,MAAD,CAAKhE,UAAU,6EACZgD,EAAD,CACEhD,UAAU,oCACVyF,UAAWjE,GAAwB,SAAhBA,EAAKG,OACxB+D,MAAI,EACJzC,cAAe,GACfE,IAAK,EACLC,cAAe,KACfC,cAAe3B,uBACZtE,IACKkG,OAAOC,UAAUnG,MAEjBoC,EAAKuF,OACGY,GAAQ9D,OAAI8D,GAAJ,CAAUC,WAAYxI,QAI5C,CAACoC,EAAKuF,GAAIlB,IAEZJ,SAAU,EACVrG,wBAAawI,aAAc,qBAG9B,MAAD,CAAK5F,UAAU,yEACZuB,GAAD,CACE/B,KAAAA,EACAS,SAAUyB,0BACYmC,EAAarE,EAAKuF,GAAIc,IAC1C,CAACrG,EAAKuF,GAAIlB,IAEZrC,KAAAA,QAMVsE,GA2DaC,GAAmBhG,gBAAK,SAA0BiG,YAG7DhG,yBACAiG,eACAC,cACAC,YACAvC,QACAwC,WACAnG,UACAoG,eACAxC,SACAyC,GAZ6DC,EAa1DpG,IAb0DoG,EAa1D,CAVH,YACA,eACA,eACA,cACA,YACA,QACA,WACA,UACA,eACA,iBAGMC,EAA2B9E,uBAC/B,CACE+E,EACAZ,UAEA5F,sBACQyG,EACwB,mBAArBb,EACHA,EAAiBc,EAAiBF,IAAW,MAC7CZ,KACFa,SAAgB7E,OAAI8E,GAAJ,EAAuBF,GAASC,IAC/C,OAE+CnJ,SAAjCqJ,GAAiCrJ,WAAAA,EAApB,CAAtBsJ,YAId,CAAC5G,IAyBG6G,EAAiBC,mBACjBC,EAAiBD,kBAAO,GAOxBE,EAAWvF,uBAAY,CAACwF,EAAmBC,KAC3CH,EAAeI,cACY,IAA3BN,EAAeM,YACJA,QAAUC,OAAOC,uBAAsB,aACrCF,aAAU,aACZA,YAAmB,OAATF,EAAgB,WAAa,YAAY,CAC9DK,SAAU,SACVC,IAAKL,UAGR,yBAGD,IAAM,UAC2B,IAA3BL,EAAeM,gBACVK,qBAAqBX,EAAeM,WAG/C,UAMIM,EAAeX,iBAAoB,MACnCY,EAAeZ,iBAAoB,MAKnCa,EAAWrD,mBACf,MACEX,UAAAA,EACAwC,MAAAA,EACAH,aAAAA,EACApC,aAAcA,GAAgB2C,KAEhC,CAACA,EAA0B5C,EAAWwC,EAAOH,EAAcpC,IAEvDgE,EAAkBnG,uBACtB,CAACoG,EAAeC,IAAkCA,EAAK3B,MAAM0B,GAAO/C,IACpE,IAGIiD,EAAgBzD,mBACpB,oBACG0D,EAAD,CAAajI,UAAU,mDACpBkI,EAAD,CACEzC,SAAUU,EACVlH,KAAK,QACLgF,QAASqC,EACTlI,KAAK,6BAEN8J,EAAD,CACEzC,SAAUS,EACVjH,KAAK,QACLgF,QAASoC,EACTjI,KAAK,oCAEN+J,EAAD,CACEnI,UAAU,8BACVoI,iBAAkBC,EAClBC,wBACG,IAAD,KAAG,4GAGAC,EAAD,qBACG,KAAD,KAAI,6FAIH,KAAD,KAAI,8DAC0C,IAAD,KAAG,cAAc,sDAG7D,KAAD,KAAI,0EACH,KAAD,KAAI,yHAIH,KAAD,KAAI,wHAIH,KAAD,KAAI,yGAQTL,EAAD,CAAQjJ,KAAK,OAAOb,KAAK,YAI/B,CAAC8H,EAAcC,EAAaE,EAASC,IAOjCkC,EAA6B9G,uBAEjC,UACEqG,MAAO9B,eAAcpC,eAAcD,YAAWwC,SAC9CqC,cACA9H,cACA+H,GAAc,aAOCtB,QAAUsB,kBAEtBhF,GAAD,CACEE,UAAW+E,EACXnJ,KAAMoJ,EAAMd,GACZjE,aAAcgF,EACdrH,KAAMsH,EAAaF,EAAMd,GAAO/C,IAChCpE,MAAAA,MAIN,2BAIC,MAAD5C,GAAKiC,UAAWK,EAAW,mBAAoBL,IAAgBG,GAC5D6H,kBACA,MAAD,CAAKhI,UAAU,kDACZ+I,EAAD,CAAWC,cAAY,IACpB,EAAEC,OAAQC,qBACR,MAAD,CACElJ,UAAU,0BACVmJ,cACoB,cAAdC,EAAM1L,IACJ0L,EAAMrG,gBAAkBqG,EAAM9I,UACvB,KAAM+I,KAEM,YAAdD,EAAM1L,IACX0L,EAAMrG,gBAAkBqG,EAAM9I,UACvB,MAAM,KAEM,aAAd8I,EAAM1L,MACN,KAzHL,KA0HmB,WAAd0L,EAAM1L,MACN,MA3HL,KA4HmB,SAAd0L,EAAM1L,MACN,KAAM,GACQ,QAAd0L,EAAM1L,KACXgK,EAAaN,WAEb,KACAkC,WAAW5B,EAAaN,QAAQzG,MAAMsI,UAK9CM,6BAEC,MAAD,CAAKvJ,UAAU,+CACZ,MAAD,CAAKA,UAAU,iEAAgE,iCAG9E,MAAD,CAAKA,UAAU,qFACZ,OAAD,CAAMsE,MAAM,oBAAmB,sBAEhC,MAAD,CAAKtE,UAAU,sFACZ,OAAD,CAAMsE,MAAM,qBAAoB,sBAEjC,MAAD,CAAKtE,UAAU,0FACZ,OAAD,CAAMsE,MAAM,0BAAyB,sBAEtC,MAAD,CAAKtE,UAAU,kFACZ,OAAD,CAAMsE,MAAM,yBAAwB,0BAErC,MAAD,CAAKtE,UAAU,mEAAkE,wBAGhF,MAAD,CAAKA,UAAU,+DAA8D,2BAI9EwJ,EAAD,CACExJ,UAAU,yBACViJ,OAAQC,EACRO,SAAU/B,EACVgC,UAAWtD,EAAM3I,OACjBmK,SAAAA,EACA+B,QAAS9B,EACT+B,SAtKK,GAuKLC,SAAUlC,EACVmC,cAAe,GACfC,gBAAc,EACdC,MAAM,QAELxB,OAMVR,MCneDiC,GAAoB,CACxBC,IAAK,EACLlF,OAAQ,EACRmF,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,KAAM,EACN1G,UAAW,EACX2G,KAAM,EACNC,KAAM,EACNC,UAAW,EACXC,SAAU,EACVC,OAAQ,EACRC,MAAO,EACPC,SAAU,EACVC,IAAK,GAmFDC,GAAsB1P,OAAOC,OAAO,IAK7B0P,GAAwB,WAC7BjD,KAACA,EAAMzJ,MAAO2M,EAAcC,aAAcC,SAAWC,GAAUC,ETtHzB,+BSwH1CvO,gBACQL,QPpBVI,GFrG4C,8BEqGG,MAAO,aOsBzCyO,OAAOlF,MAAMmF,MAAK,CAACC,EAAOC,IAAUD,EAAMzG,GAAK0G,EAAM1G,KACvDtI,EAAS6O,WAIbI,EAAoBC,GAAyBC,mBAClDb,yBAGQ,uBAGE9E,eAAgByF,IAAuBX,MACzBhD,EAAK9B,gBAE5B,CAACyF,QAAoB3D,WAAM9B,qBAExB4F,EAAcnK,uBAClB,sBAAYuE,eAAgB0F,EAAsB5D,EAAK9B,eACvD,OAAC8B,WAAM9B,gBAIP3H,MAAOwN,EACPC,QAASC,EACTC,QAAS3M,GACP4M,GAAiB,IACnBd,GAAOtO,MAAMqP,cACNA,QACG,IAAI9P,MAAM,6DAEZI,QPhD4BwJ,EOgDayF,EP/CnD7O,GQ3GyB,WR2GG,OAAQ,CAACoJ,aAAAA,KADA,IAACA,OOiD7B,0BAAUqF,iBAAQc,eACf,IAAI/P,MAAM,wBAAwBuB,KAAKC,UAAUpB,aAElDoF,OAAIsK,GAAJ,CAAUlG,aAAcyF,OAC9B,0BAGH,IAAM5M,GAAc,cAAegN,EAAa,6BAChD,CAACA,yBAGD,IAAMzM,GAAe,WAAYC,EAAU,4BAC3C,CAACA,UAGG+M,EAAsC3K,uBAC1C,CAAC+E,EAAQZ,IACP8F,mBACQW,EAAW3F,EAAiBF,GAC5BC,EACwB,mBAArBb,EACHA,EAAiBc,EAAiBF,IAAW,MAC7CZ,uBAEQlE,4BAAoBA,QAAQ,OAClC4K,EAAW,0BAAMnG,MAAMK,aAAS7J,KLrIlBL,EKuIlBmK,EACI,sBAAsB6F,SJpKD,CAAC5K,WAC5BA,OACD,aACI,eACJ,cACI,kBACJ,aACI,wBACJ,aACI,aACJ,aACI,cACJ,aACI,cACJ,aACI,mBACJ,aACI,eACJ,aACI,YACJ,aACI,gBACJ,aACI,gBACJ,aACI,eACJ,aACI,eACJ,YACI,qBAGkBA,IIoIuB6K,CACpC9F,EAAQ/E,WAEV,sBAAsB4K,OL1I5BvN,KAAK,CAACC,KAAM,YAAa1C,QAAAA,IADN,IAACA,KK+IlBmK,SAAgB7E,OAAI8E,GAAJ,EAAuBF,GAASC,IAC/C,OAE+CxG,SAAjC0G,GAAiC1G,WAAAA,EAApB,CAAtB2G,YAId,OAACkB,WAAM3B,SAGFqG,EAAOC,GAAYd,mBAAyB,OAK7Ce,EAAepI,mBACnB,WApKF6B,EACAH,SADAG,EAoK+B,0BAAMA,SAAS,GAnK9CH,EAmKkDyF,GAAsB,GAjKxEtF,EAAMwG,QACJ,CAACD,EAAcnN,WACPgC,EAAOyE,EAAazG,EAAKuF,OAC3BvD,WACW0I,IAAI2C,KAAKrN,GACdgC,EAAKG,YACN,SACUqD,OAAO6H,KAAKrN,aAEtB,SACU2K,MAAM0C,KAAKrN,aAErB,WACA,SACU6K,QAAQwC,KAAKrN,aAEvB,YACA,QACUsL,IAAI+B,KAAKrN,aAEnB,SACU4K,QAAQyC,KAAKrN,aAEvB,SACU+K,KAAKsC,KAAKrN,aAEpB,SACU8K,KAAKuC,KAAKrN,aAEpB,SACUgL,KAAKqC,KAAKrN,aAEpB,SACUiL,UAAUoC,KAAKrN,aAEzB,SACUkL,SAASmC,KAAKrN,aAExB,SACUqL,SAASgC,KAAKrN,aAExB,SACUoL,MAAMiC,KAAKrN,UAIvBmN,IAET,CAEEzC,IAAK,GACLlF,OAAQ,GACRmF,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,UAAW,GACXC,SAAU,GACVE,MAAO,GACPC,SAAU,GACVC,IAAK,OAoGP,OAAC/C,WAAM3B,MAAOsF,IASVoB,GANiBzR,OAAOsB,UAAUgD,eAAeC,KACrD+M,EACAF,IAEEE,EAAaF,GAAoChP,OAAS,EAEzBgP,EAAQ,MAEvCM,EAAaC,QAAQjF,GAAQA,EAAK9B,eAAiByF,GAEnDuB,EAAiB7G,GACrB2B,mBACGhC,GAAD,CACE/F,UAAU,+BACVkG,cAAe6G,EACf5G,aAAc4G,EACdnJ,UAAWmE,EAAKnE,UAChBwC,MAAAA,EACAH,aAAcyF,EACd7H,aAAcwI,EACdhG,QAASwF,EACTvF,OAAQ0F,2DAMTkB,EAAD,KAAI,sBACHnF,kBACEoF,EAAD,CACEnN,UAAU,8BACVC,YA5Me,CAACwM,GACP,iBAAVA,GACPpR,OAAOsB,UAAUgD,eAAeC,KAAKqK,GAAmBwC,GA0M7BW,CAAiBC,IAAUX,EAASW,GACvDC,0BAAwB,EACxBC,cAAeT,mBAEdU,EAAD,CACEzI,GAA8B,MAC9B0I,MAAOR,EAAcN,EAAazC,KAClCwD,eAAe,iCACfpJ,MAAM,QAEPqI,EAAapC,KAAK9M,OAAS,mBACzB+P,EAAD,CACEzI,GAA8B,OAC9B0I,MAAOR,EAAcN,EAAapC,MAClCmD,eAAe,iCACfpJ,MAAM,SAGTqI,EAAanC,KAAK/M,OAAS,mBACzB+P,EAAD,CACEzI,GAA8B,OAC9B0I,MAAOR,EAAcN,EAAanC,MAClCkD,eAAe,iCACfpJ,MAAM,SAGTqI,EAAalC,UAAUhN,OAAS,mBAC9B+P,EAAD,CACEzI,GAA8B,YAC9B0I,MAAOR,EAAcN,EAAalC,WAClCiD,eAAe,iCACfpJ,MAAM,cAGTqI,EAAa7B,IAAIrN,OAAS,mBACxB+P,EAAD,CACEzI,GAA8B,MAC9B0I,MAAOR,EAAcN,EAAa7B,KAClC4C,eAAe,iCACfpJ,MAAM,QAGTqI,EAAa3H,OAAOvH,OAAS,mBAC3B+P,EAAD,CACEzI,GAA8B,SAC9B0I,MAAOR,EAAcN,EAAa3H,QAClC0I,eAAe,iCACfpJ,MAAM,WAGTqI,EAAa/B,MAAMnN,OAAS,mBAC1B+P,EAAD,CACEzI,GAA8B,QAC9B0I,MAAOR,EAAcN,EAAa/B,OAClC8C,eAAe,iCACfpJ,MAAM,eAGTqI,EAAaxC,MAAM1M,OAAS,mBAC1B+P,EAAD,CACEzI,GAA8B,QAC9B0I,MAAOR,EAAcN,EAAaxC,OAClCuD,eAAe,iCACfpJ,MAAM,aAGTqI,EAAa9B,SAASpN,OAAS,mBAC7B+P,EAAD,CACEzI,GAA8B,WAC9B0I,MAAOR,EAAcN,EAAa9B,UAClC6C,eAAe,iCACfpJ,MAAM,gBAGTqI,EAAarC,KAAK7M,OAAS,mBACzB+P,EAAD,CACEzI,GAA8B,OAC9B0I,MAAOR,EAAcN,EAAarC,MAClCoD,eAAe,iCACfpJ,MAAM,SAGTqI,EAAavC,QAAQ3M,OAAS,mBAC5B+P,EAAD,CACEzI,GAA8B,UAC9B0I,MAAOR,EAAcN,EAAavC,SAClCsD,eAAe,iCACfpJ,MAAM,YAGTqI,EAAatC,QAAQ5M,OAAS,mBAC5B+P,EAAD,CACEzI,GAA8B,UAC9B0I,MAAOR,EAAcN,EAAatC,SAClCqD,eAAe,iCACfpJ,MAAM,YAGTqI,EAAajC,SAASjN,OAAS,mBAC7B+P,EAAD,CACEzI,GAA8B,WAC9B0I,MAAOR,EAAcN,EAAajC,UAClCgD,eAAe,iCACfpJ,MAAM,eAIV6G,kBACDwC,EAAD,sBAECC,EAAD,CACE3O,KAAMgM,EAAe,QAAU,YAC/B3G,MAAO2G,EAAe,sBAAwB,sBAC9C4C,YACE5C,aAAwB5O,MAAQ4O,EAAa1O,aAAU,YEvVtDuR,GAA4B/N,gBAEvC,SAAmCgO,YACjCC,gCACAC,YACAjO,EAAY,IAHqBkO,EAI9B/N,IAJ8B+N,EAI9B,CAHH,iBACA,iBACA,qCAIGxL,EAAD3E,GACEiC,UAAW,6BAA6BA,IACxCmO,YACEH,kBACGI,EAAD,CAAMpO,UAAU,qCACbgO,QAED,EAENK,aACEJ,kBACGG,EAAD,CAAMpO,UAAU,qCACbiO,QAED,GAEF9N,OCdZ,MAkBMmO,GAAsBvO,gBAAK,UAA6BwO,aAC5DA,EAAe,UACfC,WACAC,iBACAC,oBACAC,2BAUGC,EAAD,CACEC,mBAAiB,EACjBC,sBAAoB,EACpB7P,KAAK,eACLuP,OAAAA,EACAO,QAASN,EACTnK,MAAO,2BAA0BiK,EAAa9Q,OAAS,EAAI,IAAM,qBAEhE,MAAD,CAAKuC,UAAWgP,GAAqB,0CAElCT,EAAa9Q,OAAS,EAAI,WAAa,UAAU,oBACjD,KAAD,KACG8Q,EAAaU,KAAI,CAACC,EAAOpH,oBACvB,KAAD,CAAIpK,IAAKoK,GACNoH,EAAMzM,MAAM,qBAAG2L,EAAD,KAAOc,EAAMC,SAAe,KAAQ,oBAClDf,EAAD,KAAOc,EAAME,aAGd,8DAEJb,EAAa9Q,OAAS,GAAK,IAAI,qBAEjC,MAAD,CAAKuC,UAAWqP,mBACb,MAAD,CAAKrP,UAAWsP,mBACbpH,EAAD,CACEjJ,KAAK,YACLb,KAAK,gBACL6F,QAASyK,oBAEVxG,EAAD,CACEjJ,KAAK,WACLb,KAAM,mBAAmBmQ,EAAa9Q,OAAS,EAAI,IAAM,UACzDwG,QAAS0K,oBAEVzG,EAAD,CAAQhJ,OAAO,SAASd,KAAK,SAAS6F,QAASwK,UAWnDc,GAAU,CACdnS,EACAoS,IACeA,EAAYC,SAASrS,GAEzBsS,GAAc,WAClB3H,KAAM4H,EAAYrR,MAAO2M,SAAcG,GAAUC,EC3GhC,WD6GtBvO,gBVQFD,GWrHwB,UXqHG,MAAO,KURYyO,UAGvCsE,EAAQC,GAAajE,mBAA+B,2BAGjD,KACJ+D,IAAeC,KACPD,KAEX,CAACA,EAAYC,UAMTE,EAAaC,GAAkBnE,mBAEpC,IACIoE,EAActO,uBAAY,IAAMqO,EAAe,KAAK,KAGxD9D,QAAS3M,EACTyM,QAASkE,EACT3R,MAAOwN,GACLI,EACFxK,uBACE5E,MAAOoT,cAGAN,QACG,IAAIvT,MAAM,gCAEbsT,QACG,IAAItT,MAAM,iDAGZkS,EAAmC,MACrCqB,EAAOO,eAAiBR,EAAWQ,gBACxBtD,KAAK,CAChBpK,MAAO,eACP0M,QA/HmB,WAgIQQ,EAAWQ,aA9H/B,OA+HPf,QAjImB,WAiIeQ,EAAOO,aA/HlC,SAkIPP,EAAOQ,gBAAkBT,EAAWS,iBACzBvD,KAAK,CAChBpK,MAAO,aACP0M,QAtIoB,YAuIQQ,EAAWS,cAtIhC,OAuIPhB,QAxIoB,YAyIQQ,EAAOQ,cAxI5B,SA8IP7B,EAAa9Q,aAAkC,IAAxByS,gBACV,CAAC1B,QAAQ,EAAMD,aAAAA,UAI1B9R,OVrDwB,EACpCmT,EACAM,IACGrT,GW1HqB,UX0HM,OAAQ,CAAC+S,OAAAA,EAAQM,oBAAAA,IUkDlBG,CACrBT,EACAM,QAEG,0BAAU5E,iBAAQc,eACf,IAAI/P,MAAM,wBAAwBuB,KAAKC,UAAUpB,QAElDmT,KAET,CAACD,EAAYC,EAAQxE,KAInB2B,GAAcuD,EAAOV,EAAQD,GAC7BY,EAAgB7O,uBACnB8O,GACCX,EAC6B,mBAApBW,KACOC,GAAUD,EAAgBC,GACpCD,IAER,IAGIE,GAAcf,IAAeC,GAAUtQ,uBAG3C,IAAMR,GAAc,eAAgBmM,EAAc,uBAClD,CAACA,yBAGD,IAAMnM,GAAc,cAAegN,EAAa,uBAChD,CAACA,yBAEO,IAAMzM,GAAe,WAAYC,EAAU,qBAAqB,CACxEA,UAGIqR,EAA2BD,sBAAuBE,wEAGnDtC,GAADvQ,GACE0Q,SAAU,IAAMuB,IAChBtB,eAAgB,YAEH,IAEbC,kBAAmB,YAEN,KAETmB,oBAEL5C,EAAD,KAAI,qCAEH,WAAD,CAAUlN,UAAU,wCACjB,SAAD,CAAQA,UAAU,6BAA4B,oCAE7C6Q,EAAD,CACEpL,SAAUiL,EACVnO,QAAM,EACNE,MAAM,qCACNxC,SAAUyB,uBACR,EAAEqB,eAAgB3F,MAAAA,aACV0T,EAAkBxN,OAAOlG,GAC3BmS,GAAQuB,EAAiB,CAAC,qBACCL,IAAQK,gBAAAA,QAGzC,CAACP,IAEHQ,oBAAenB,WAAQkB,iCAEtBE,EAAD,CACEhR,UAAY4P,OAA4B,EAAnBqB,EACrBxO,MAAM,QACNrF,MAAO,oBAER4T,EAAD,CACEhR,UAAY4P,OAA4B,EAAnBqB,EACrBxO,MAAM,wCACNrF,4BAIH8T,EAAD,CAASlR,UAAU,yCAElB6Q,EAAD,CACEpL,SAAUiL,EACVnO,QAAM,EACNE,MAAM,iBACNxC,SAAUyB,uBACR,EAAEqB,eAAgB3F,MAAAA,OACZmS,GAAQnS,EAAO,CAAC,OAAQ,sBACGqT,IAAQU,gBAAiB/T,QAG1D,CAACmT,IAEHQ,oBAAenB,WAAQuB,iCAEtBH,EAAD,CACEhR,UAAY4P,OAA4B,EAAnBqB,EACrBxO,MAAM,YACNrF,MAAM,yBAEP4T,EAAD,CACEhR,UAAY4P,OAA4B,EAAnBqB,EACrBxO,MAAO,GPjRW,WOiRO2C,8CACzBhI,MAAM,yBAIT8T,EAAD,CAASlR,UAAU,yCAElB6C,EAAD,CACEC,QAASkK,cAAQ4C,WAAQwB,cACzBpR,UAAY4P,OAA4B,EAAnBqB,EACrBxL,SAAUiL,EACVzQ,SAAU,EAAE8C,eAAgBD,QAAAA,MAC1ByN,aAA6BE,IAAQW,aAActO,OAEtD,iCACgB,QAAD,KAAO,mDAIxB,WAAD,CAAU9C,UAAU,wCACjB,SAAD,CAAQA,UAAU,6BAA4B,oCAC7C6C,EAAD,CACEC,QAASkK,cAAQ4C,WAAQgB,iBACzB5Q,UAAY4P,OAA4B,EAAnBqB,EACrBxL,SAAUiL,EACVzQ,SAAU,EAAE8C,eAAgBD,QAAAA,MAC1ByN,aAA6BE,IAAQG,gBAAiB9N,OAEzD,kCAGAT,EAAD,CACErC,UAAU,gCACVyF,SAAUkL,EACVpO,QAAM,EACNrD,OACGyR,qBAAqCU,oBAElC,EADA,UAGN5O,MAAM,mBACNP,WACGyO,qBAAqCU,ePrT9B,IOsTJ,oCAIL3O,EAAD,CACE1C,UAAY4P,OAA4B,EAAnBqB,EACrBxL,SAAUkL,EACV1Q,SAAU,EAAEK,QAASlD,MAAAA,MACnBmT,aAA6BE,IAAQY,cAAejU,MAEtDuF,YAAagO,EAA2B,GAAK,oBAC7CvT,wBAAeiU,gBAAiB,sBAGnChP,EAAD,CACErC,UAAU,gCACVyF,SAAUiL,sBAAuBE,iBACjCrO,QAAM,EACNE,MAAM,0CAELC,EAAD,CACE1C,UAAY4P,OAA4B,EAAnBqB,EACrBxL,SAAUiL,sBAAuBE,iBACjC3Q,SAAU,EAAEK,QAASlD,MAAAA,MACnBmT,aACKE,IACHa,sBAAuBlU,MAG3BuF,YAAagO,EAA2B,GAAK,sBAC7CvT,wBAAekU,wBAAyB,uBAK7C,WAAD,CAAUtR,UAAU,wCACjB,SAAD,CAAQA,UAAU,6BAA4B,8BAC7CqC,EAAD,CACErC,UAAU,gCACVyF,SAAUiL,EACVnO,QAAM,EACNE,MAAM,iCAELqL,GAAD,CACE9N,UAAWK,EACT,6BACCuP,GAAUqB,GAEbxL,SAAUiL,EACV1C,eA7VmB,WA8VnBC,eA5VO,OA6VPhO,SAAUyB,uBACR,EAAEpB,QAASlD,MAAAA,MACTmT,aAA6BE,IAAQN,aAAc/S,OACrD,CAACmT,IAEHnT,wBAAe+S,eAAgB,sBAGlC9N,EAAD,CACErC,UAAU,gCACVyF,SAAUiL,EACVnO,QAAM,EACNE,MAAM,+BAELqL,GAAD,CACE9N,UAAWK,EACT,6BACCuP,GAAUqB,GAEbxL,SAAUiL,EACV1C,eAlXoB,YAmXpBC,eAlXO,OAmXPhO,SAAUyB,uBACR,EAAEpB,QAASlD,MAAAA,MACTmT,aAA6BE,IAAQL,cAAehT,OACtD,CAACmT,IAEHnT,wBAAegT,gBAAiB,uBAKrCnI,EAAD,qBACGC,EAAD,CACEzC,SAAUiL,IAAe3D,EACzB9N,KAAK,cACLgF,QAASvC,uBAAY,IAAMuO,KAAc,CAACA,IAC1C7R,KAAK,yBAEN8J,EAAD,CACEzC,SAAUiL,IAAe3D,EACzB9N,KAAK,QACLgF,QAASvC,uBAAY,IAAMiO,GAAcE,EAAUF,IAAa,CAC9DA,IAEFvR,KAAK,uBExZf,MAAMmT,mBAAU,OAAD,CAAMvR,UAAU,4BAA2B,KAM7CwR,GAAmB,WACxBzJ,KAACA,EAAMmD,aAAcC,EAAW7M,MAAO2M,GAAgBI,EClBjC,eDoB1BvO,gBZyGFD,Ga7H4B,cb6HG,MAAO,KYzGKyO,SAGrCmG,EAAmBlN,mBACvB,IACEwD,EACI1M,OAAOqW,OAAO3J,EAAK4J,uBAAuB/E,QACxC,CAACgF,EAAKC,IAAQD,EAAMC,IAEtB,GACN,CAAC9J,2BAIA,MAAD,qBACGmF,EAAD,qBACG,IAAD,CACEvI,KAAK,mEACLC,IAAI,sBACJtE,OAAO,UACR,oCAIF,IAAD,KAAG,oBACiB,oBACjB,IAAD,CACEqE,KAAK,2DACLC,IAAI,sBACJtE,OAAO,UACR,0DAIFwR,EAAD,CAAS5S,OAAO,UAAUoF,MAAM,0BAAyB,8BAC3C,IAAD,KAAG,OAAO,6EAEpB,KAAD,MAAM,MACF,oBACH,IAAD,CAAGK,KAAK,iDAAgD,cAEnD,IAAI,uBAGVoD,EACC0J,EAAmB,kBAChBM,EAAD,CACEC,UAAQ,EACRhS,UAAU,kCACViS,WAAS,mBAER,KAAD,qBACG,KAAD,CACEtR,MACEoH,EAAKmK,uBAAyB,EAC1B,CAACtR,MAAOC,EAAOsR,cACf,GAEP,gDAGA,KAAD,CACExR,MACEoH,EAAKmK,uBAAyB,EAC1B,CAACtR,MAAOC,EAAOsR,cACf,GAGLpK,EAAKmK,yCAGT,KAAD,qBACG,KAAD,KAAI,oCACH,KAAD,KAAKT,oBAEN,KAAD,qBACG,KAAD,KAAKF,GAAO,6BACX,KAAD,KAAKxJ,EAAK4J,sBAAsB7V,uBAEjC,KAAD,qBACG,KAAD,KAAKyV,GAAO,6BACX,KAAD,KAAKxJ,EAAK4J,sBAAsB3V,uBAEjC,KAAD,qBACG,KAAD,KAAKuV,GAAO,qCACX,KAAD,KACGxJ,EAAK4J,sBAAsBpW,KAC1BwM,EAAK4J,sBAAsBhW,uBAGhC,KAAD,qBACG,KAAD,KAAK4V,GAAO,8BACX,KAAD,KAAKxJ,EAAK4J,sBAAsB1V,uBAEjC,KAAD,qBACG,KAAD,KAAKsV,GAAO,iCACX,KAAD,KACGxJ,EAAK4J,sBAAsBnW,MAC1BuM,EAAK4J,sBAAsBvV,sBAGhC,KAAD,qBACG,KAAD,KAAKmV,GAAO,kCACX,KAAD,KAAKxJ,EAAK4J,sBAAsBjW,uBAEjC,KAAD,qBACG,KAAD,KAAK6V,GAAO,sCACX,KAAD,KAAKxJ,EAAK4J,sBAAsBlW,uBAEjC,KAAD,qBACG,KAAD,KAAK8V,GAAO,6BACX,KAAD,KAAKxJ,EAAK4J,sBAAsB5V,uBAEjC,KAAD,qBACG,KAAD,KAAKwV,GAAO,6BACX,KAAD,KAAKxJ,EAAK4J,sBAAsBxV,uBAEjC,KAAD,qBACG,KAAD,KAAKoV,GAAO,iCACX,KAAD,KAAKxJ,EAAK4J,sBAAsB9V,uBAEjC,KAAD,qBACG,KAAD,KAAK0V,GAAO,wCACX,KAAD,KAAKxJ,EAAK4J,sBAAsB/V,uBAEjC,KAAD,qBACG,KAAD,KAAK2V,GAAO,oCACX,KAAD,KAAKxJ,EAAK4J,sBAAsBzV,wBAInC0R,EAAD,CACE3O,KAAK,OACL4O,YAAY,gHACZvJ,MAAM,8CAGR6G,kBACDwC,EAAD,sBAECC,EAAD,CACE3O,KAAMgM,EAAe,QAAU,YAC/B3G,MAAO2G,EAAe,sBAAwB,sBAC9C4C,YACE5C,aAAwB5O,MAAQ4O,EAAa1O,aAAU,ME/InE,MAAMwO,GAAsB,GAEfqH,GAA0B,WAQ/BrK,KACJA,EACAzJ,MAAO2M,EACPC,aAAcmH,SACdjH,GACEC,EhBnC0C,iCgBmCCvO,gBACvCL,QdmERI,GFvG8C,gCEuGG,MAAO,acjE7CyO,OAAOlF,MAAMmF,MAAK,CAACC,EAAOC,IAAUD,EAAMzG,GAAK0G,EAAM1G,KACvDtI,EAAS6O,WAGXrF,EAAcqM,GAAmB1G,mBACtCb,IAEIwH,EAAoB7Q,uBACxB,IAAM4Q,EAAgBvH,KACtB,IAGIgC,EAAaxI,mBAAQ,KAAO+L,EAAOrK,EAAc8E,KAAsB,CAC3E9E,KAIA3H,MAAOwN,EACPC,QAASyG,EACTvG,QAAS3M,GACP4M,GAAiBpP,sBACbL,QdkDRgW,EclDkDxM,EdmD/CpJ,GQ/GsB,WR+GM,QAAS,CAAC4V,kBAAAA,KAFH,IACtCA,OcjDO,0BAAUnH,iBAAQc,eACf,IAAI/P,MAAM,wBAAwBuB,KAAKC,UAAUpB,sCAOzD,IAAMqC,GAAc,cAAegN,EAAa,6BAChD,CAACA,yBAGD,IAAMzM,GAAe,WAAYC,EAAU,4BAC3C,CAACA,UAGGoT,EAAoBhR,uBACxB,IACEqG,GACAuK,GAAiB/U,QAAIuL,IAAJvL,EAAI,cACRiC,KAAQuI,EAAK3B,MAClB5G,EAAKe,YACMf,EAAKuF,IAAM,CAACpD,OAAQ,OAAQM,SAAU,WAGhD6G,MAEX,CAACf,IAEG4K,EAAsBjR,uBAC1B,IACEqG,GACAuK,GAAiB/U,QAAIuL,IAAJvL,EAAI,cACRiC,KAAQuI,EAAK3B,MAClB5G,EAAK6B,cACM7B,EAAKuF,IAAM,CAACpD,OAAQ,gBAG9BmH,MAEX,CAACf,IAEG6K,EAAoBlR,uBACxB,IACEqG,GACAuK,GAAiB/U,QAAIuL,IAAJvL,EAAI,cACRiC,KAAQuI,EAAK3B,QACT5G,EAAKuF,IAAM,CAACpD,OAAQ,eAE5BmH,MAEX,CAACf,2DAKEmF,EAAD,KAAI,yCACHnF,EACCA,EAAK3B,MAAM3I,OAAS,kDAEf4E,EAAD,CAAWE,QAAM,EAACE,MAAM,8CACrBwF,EAAD,qBACGC,EAAD,CACEzC,UACGsC,EAAK3B,MAAMyM,yBAEHtS,SAA6C,UAAlC,WAAaf,EAAKuF,cAAKpD,WAG7CsC,QAASyO,GACV,4BAGAxK,EAAD,CACEzC,UACGsC,EAAK3B,MAAMyM,yBAEHxR,WAC6B,UAAlC,WAAa7B,EAAKuF,cAAKpD,WAG7BsC,QAAS0O,GACV,0BAGAzK,EAAD,CACEzC,UACGsC,EAAK3B,MAAMyM,sBACgC,UAAlC,WAAarT,EAAKuF,cAAKpD,WAGnCsC,QAAS2O,GACV,8BAKJ7M,GAAD,CACE/F,UAAU,iCACVkG,cAAe6G,EACf5G,aAAc4G,EACdnJ,UAAWmE,EAAKnE,UAChBwC,MAAO2B,EAAK3B,MACZH,aAAAA,EACAhG,SAAUqS,EACVjM,QAASkM,EACTjM,OAAQkM,qBAIX5E,EAAD,CACE3O,qBACG,MAAD,CACEuF,IAAI,gBACJC,IAAI,8CAGRH,MAAM,6CACNuJ,YAAY,8CAGdwE,kBACD1E,EAAD,sBAECC,EAAD,CACE3O,KAAMgM,EAAe,QAAU,YAC/B3G,MAAO2G,EAAe,sBAAwB,sBAC9C4C,YACE5C,aAAwB5O,MAAQ4O,EAAa1O,aAAU,MCvL7DuW,GAAWzX,OAAOC,OAAO,CAC7ByX,YAAa,EACbnD,OAAQ,EACRoD,YAAa,EACbC,cAAe,IAWXC,GAAsBzG,GAC1BpR,OAAOsB,UAAUgD,eAAeC,KAAKkT,GAAUrG,GAC1CA,EAVa,cAaP0G,GAAM,WACV1G,EAAOC,GAAYd,mBAdR,sCAiBf,MAAD,CAAK5L,UAAU,uBACZmN,EAAD,CACEnN,UAAU,YACV+E,GAAG,WACH9E,YAAmByM,EAASwG,GAAmB7F,IAC/CC,0BAAwB,EACxBC,cAAe2F,GAAmBzG,oBAEjCe,EAAD,CACEzI,GAA2B,cAC3B0I,sBAAQ+D,GAAD,MACP9D,eAAe,eACfpJ,MAAM,gCAEPkJ,EAAD,CACEzI,GAA2B,gBAC3B0I,sBAAQ2E,GAAD,MACP1E,eAAe,eACfpJ,MAAM,8BAEPkJ,EAAD,CACEzI,GAA2B,cAC3B0I,sBAAQzC,GAAD,MACP0C,eAAe,eACfpJ,MAAM,+BAEPkJ,EAAD,CACEzI,GAA2B,SAC3B0I,sBAAQiC,GAAD,MACPhC,eAAe,eACfpJ,MAAM,qBC1DhB8O,EAASC,uBACNC,EAAMC,WAAP,qBACGJ,GAAD,OAEFK,SAASC,eAAe"}